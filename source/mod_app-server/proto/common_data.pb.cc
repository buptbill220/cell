// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cell {

namespace {

const ::google::protobuf::Descriptor* Geo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Geo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* UGC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UGC_reflection_ = NULL;
const ::google::protobuf::Descriptor* UGCIdList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UGCIdList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Gender_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RegSource_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DeviceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UserProfileType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UserStat_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetworkType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UGCListType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RetCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TargetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CardType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ConfirmType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BloodType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ConstellationType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ZodiacType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PostType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PullType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommentType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_5fdata_2eproto() {
  protobuf_AddDesc_common_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common_data.proto");
  GOOGLE_CHECK(file != NULL);
  Geo_descriptor_ = file->message_type(0);
  static const int Geo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, longitude_),
  };
  Geo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Geo_descriptor_,
      Geo::default_instance_,
      Geo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Geo));
  MessageMeta_descriptor_ = file->message_type(1);
  static const int MessageMeta_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMeta, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMeta, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMeta, voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMeta, video_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMeta, img_size_),
  };
  MessageMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageMeta_descriptor_,
      MessageMeta::default_instance_,
      MessageMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageMeta));
  UGC_descriptor_ = file->message_type(2);
  static const int UGC_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGC, message_meta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGC, geo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGC, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGC, card_type_),
  };
  UGC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UGC_descriptor_,
      UGC::default_instance_,
      UGC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UGC));
  UGCIdList_descriptor_ = file->message_type(3);
  static const int UGCIdList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGCIdList, ugc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGCIdList, org_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGCIdList, msid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGCIdList, mstid_),
  };
  UGCIdList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UGCIdList_descriptor_,
      UGCIdList::default_instance_,
      UGCIdList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGCIdList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGCIdList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UGCIdList));
  Gender_descriptor_ = file->enum_type(0);
  RegSource_descriptor_ = file->enum_type(1);
  DeviceType_descriptor_ = file->enum_type(2);
  UserProfileType_descriptor_ = file->enum_type(3);
  UserStat_descriptor_ = file->enum_type(4);
  NetworkType_descriptor_ = file->enum_type(5);
  UGCListType_descriptor_ = file->enum_type(6);
  RetCode_descriptor_ = file->enum_type(7);
  TargetType_descriptor_ = file->enum_type(8);
  CardType_descriptor_ = file->enum_type(9);
  ConfirmType_descriptor_ = file->enum_type(10);
  BloodType_descriptor_ = file->enum_type(11);
  ConstellationType_descriptor_ = file->enum_type(12);
  ZodiacType_descriptor_ = file->enum_type(13);
  PostType_descriptor_ = file->enum_type(14);
  PullType_descriptor_ = file->enum_type(15);
  CommentType_descriptor_ = file->enum_type(16);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Geo_descriptor_, &Geo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageMeta_descriptor_, &MessageMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UGC_descriptor_, &UGC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UGCIdList_descriptor_, &UGCIdList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_5fdata_2eproto() {
  delete Geo::default_instance_;
  delete Geo_reflection_;
  delete MessageMeta::default_instance_;
  delete MessageMeta_reflection_;
  delete UGC::default_instance_;
  delete UGC_reflection_;
  delete UGCIdList::default_instance_;
  delete UGCIdList_reflection_;
}

void protobuf_AddDesc_common_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021common_data.proto\022\004Cell\"*\n\003Geo\022\020\n\010lati"
    "tude\030\001 \002(\002\022\021\n\tlongitude\030\002 \002(\002\"]\n\013Message"
    "Meta\022\017\n\007content\030\001 \001(\t\022\r\n\005image\030\002 \003(\t\022\r\n\005"
    "voice\030\003 \003(\t\022\r\n\005video\030\004 \003(\t\022\020\n\010img_size\030\005"
    " \003(\t\"\213\001\n\003UGC\022\'\n\014message_meta\030\001 \001(\0132\021.Cel"
    "l.MessageMeta\022\026\n\003geo\030\002 \001(\0132\t.Cell.Geo\022 \n"
    "\006target\030\003 \001(\0162\020.Cell.TargetType\022!\n\tcard_"
    "type\030\004 \001(\0162\016.Cell.CardType\"I\n\tUGCIdList\022"
    "\016\n\006ugc_id\030\001 \001(\004\022\017\n\007org_uid\030\002 \001(\r\022\014\n\004msid"
    "\030\003 \001(\004\022\r\n\005mstid\030\004 \001(\004*3\n\006Gender\022\013\n\007GR_MA"
    "LE\020\000\022\r\n\tGR_FEMALE\020\001\022\r\n\tGR_UNKNOW\020\002*B\n\tRe"
    "gSource\022\r\n\tRS_NATIVE\020\000\022\014\n\010RS_WEIBO\020\001\022\r\n\t"
    "RS_WEIXIN\020\002\022\t\n\005RS_QQ\020\003*3\n\nDeviceType\022\n\n\006"
    "DT_IOS\020\000\022\016\n\nDT_ANDROID\020\001\022\t\n\005DT_WP\020\002*H\n\017U"
    "serProfileType\022\016\n\nUS_PROFILE\020\000\022\022\n\016US_UGC"
    "_ACHIEVE\020\001\022\021\n\rUS_PK_ACHIEVE\020\002*>\n\010UserSta"
    "t\022\017\n\013US_REG_USER\020\000\022\021\n\rUS_UNREG_USER\020\001\022\016\n"
    "\nUS_UNKNOWN\020\002*;\n\013NetworkType\022\t\n\005NT_2G\020\000\022"
    "\t\n\005NT_3G\020\001\022\t\n\005NT_4G\020\002\022\013\n\007NT_WIFI\020\003*G\n\013UG"
    "CListType\022\013\n\007UGC_GEN\020\000\022\014\n\010UGC_POST\020\001\022\014\n\010"
    "UGC_PASS\020\002\022\017\n\013UGC_COLLECT\020\003*j\n\007RetCode\022\016"
    "\n\nRC_SUCCESS\020\000\022\024\n\020RC_PHONE_INVALID\020\001\022\022\n\016"
    "RC_INNER_ERROR\020\002\022\r\n\tRC_FAILED\020\003\022\026\n\022RC_SE"
    "SSION_INVALID\020\004*1\n\nTargetType\022\n\n\006T_MALE\020"
    "\000\022\014\n\010T_FEMALE\020\001\022\t\n\005T_ALL\020\002*7\n\010CardType\022\t"
    "\n\005SPADE\020\001\022\t\n\005HEART\020\002\022\013\n\007DIAMOND\020\003\022\010\n\004CLU"
    "B\020\004*!\n\013ConfirmType\022\006\n\002OK\020\001\022\n\n\006CANCEL\020\002*@"
    "\n\tBloodType\022\013\n\007BLOOD_A\020\001\022\013\n\007BLOOD_B\020\002\022\014\n"
    "\010BLOOD_AB\020\003\022\013\n\007BLOOD_O\020\004*\251\001\n\021Constellati"
    "onType\022\t\n\005ARIES\020\001\022\n\n\006TAURUS\020\002\022\013\n\007GEIMINI"
    "\020\003\022\n\n\006CANCER\020\004\022\007\n\003LEO\020\005\022\t\n\005VIRGO\020\006\022\t\n\005LI"
    "BRA\020\007\022\013\n\007SCORPIO\020\010\022\017\n\013SAGITTARIUS\020\t\022\r\n\tC"
    "APRICORN\020\n\022\014\n\010AQUARIUS\020\013\022\n\n\006PISCES\020\014*\220\001\n"
    "\nZodiacType\022\t\n\005MOUTH\020\001\022\007\n\003COW\020\002\022\n\n\006TIGGE"
    "R\020\003\022\n\n\006RABBIT\020\004\022\n\n\006dragon\020\005\022\t\n\005SNAKE\020\006\022\t"
    "\n\005HORSE\020\007\022\t\n\005SHEEP\020\010\022\n\n\006MONKEY\020\t\022\013\n\007CHIC"
    "KEN\020\n\022\007\n\003DOG\020\013\022\007\n\003PIG\020\014*$\n\010PostType\022\013\n\007P"
    "T_POST\020\000\022\013\n\007PT_PASS\020\001*$\n\010PullType\022\013\n\007PT_"
    "PULL\020\000\022\013\n\007PT_PLAY\020\001*C\n\013CommentType\022\022\n\016US"
    "ER_POST_TYPE\020\000\022\022\n\016USER_RECV_TYPE\020\001\022\014\n\010MS"
    "G_TYPE\020\002", 1608);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common_data.proto", &protobuf_RegisterTypes);
  Geo::default_instance_ = new Geo();
  MessageMeta::default_instance_ = new MessageMeta();
  UGC::default_instance_ = new UGC();
  UGCIdList::default_instance_ = new UGCIdList();
  Geo::default_instance_->InitAsDefaultInstance();
  MessageMeta::default_instance_->InitAsDefaultInstance();
  UGC::default_instance_->InitAsDefaultInstance();
  UGCIdList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_5fdata_2eproto {
  StaticDescriptorInitializer_common_5fdata_2eproto() {
    protobuf_AddDesc_common_5fdata_2eproto();
  }
} static_descriptor_initializer_common_5fdata_2eproto_;
const ::google::protobuf::EnumDescriptor* Gender_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gender_descriptor_;
}
bool Gender_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RegSource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegSource_descriptor_;
}
bool RegSource_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DeviceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceType_descriptor_;
}
bool DeviceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UserProfileType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserProfileType_descriptor_;
}
bool UserProfileType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UserStat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserStat_descriptor_;
}
bool UserStat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NetworkType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkType_descriptor_;
}
bool NetworkType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UGCListType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UGCListType_descriptor_;
}
bool UGCListType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RetCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetCode_descriptor_;
}
bool RetCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TargetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetType_descriptor_;
}
bool TargetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CardType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardType_descriptor_;
}
bool CardType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConfirmType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfirmType_descriptor_;
}
bool ConfirmType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BloodType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BloodType_descriptor_;
}
bool BloodType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConstellationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConstellationType_descriptor_;
}
bool ConstellationType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ZodiacType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZodiacType_descriptor_;
}
bool ZodiacType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PostType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostType_descriptor_;
}
bool PostType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PullType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PullType_descriptor_;
}
bool PullType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CommentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommentType_descriptor_;
}
bool CommentType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Geo::kLatitudeFieldNumber;
const int Geo::kLongitudeFieldNumber;
#endif  // !_MSC_VER

Geo::Geo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Geo::InitAsDefaultInstance() {
}

Geo::Geo(const Geo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Geo::SharedCtor() {
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Geo::~Geo() {
  SharedDtor();
}

void Geo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Geo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Geo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Geo_descriptor_;
}

const Geo& Geo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5fdata_2eproto();
  return *default_instance_;
}

Geo* Geo::default_instance_ = NULL;

Geo* Geo::New() const {
  return new Geo;
}

void Geo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    latitude_ = 0;
    longitude_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Geo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float latitude = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_longitude;
        break;
      }

      // required float longitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Geo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->latitude(), output);
  }

  // required float longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->longitude(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Geo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float latitude = 1;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->latitude(), target);
  }

  // required float longitude = 2;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->longitude(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Geo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // required float longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Geo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Geo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Geo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Geo::MergeFrom(const Geo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Geo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Geo::CopyFrom(const Geo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Geo::Swap(Geo* other) {
  if (other != this) {
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Geo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Geo_descriptor_;
  metadata.reflection = Geo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageMeta::kContentFieldNumber;
const int MessageMeta::kImageFieldNumber;
const int MessageMeta::kVoiceFieldNumber;
const int MessageMeta::kVideoFieldNumber;
const int MessageMeta::kImgSizeFieldNumber;
#endif  // !_MSC_VER

MessageMeta::MessageMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageMeta::InitAsDefaultInstance() {
}

MessageMeta::MessageMeta(const MessageMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageMeta::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageMeta::~MessageMeta() {
  SharedDtor();
}

void MessageMeta::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void MessageMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageMeta_descriptor_;
}

const MessageMeta& MessageMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5fdata_2eproto();
  return *default_instance_;
}

MessageMeta* MessageMeta::default_instance_ = NULL;

MessageMeta* MessageMeta::New() const {
  return new MessageMeta;
}

void MessageMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  image_.Clear();
  voice_.Clear();
  video_.Clear();
  img_size_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_image;
        break;
      }

      // repeated string image = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->image(this->image_size() - 1).data(),
            this->image(this->image_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_image;
        if (input->ExpectTag(26)) goto parse_voice;
        break;
      }

      // repeated string voice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_voice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->voice(this->voice_size() - 1).data(),
            this->voice(this->voice_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_voice;
        if (input->ExpectTag(34)) goto parse_video;
        break;
      }

      // repeated string video = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_video()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->video(this->video_size() - 1).data(),
            this->video(this->video_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_video;
        if (input->ExpectTag(42)) goto parse_img_size;
        break;
      }

      // repeated string img_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_img_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_img_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->img_size(this->img_size_size() - 1).data(),
            this->img_size(this->img_size_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_img_size;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }

  // repeated string image = 2;
  for (int i = 0; i < this->image_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->image(i).data(), this->image(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->image(i), output);
  }

  // repeated string voice = 3;
  for (int i = 0; i < this->voice_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->voice(i).data(), this->voice(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->voice(i), output);
  }

  // repeated string video = 4;
  for (int i = 0; i < this->video_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->video(i).data(), this->video(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->video(i), output);
  }

  // repeated string img_size = 5;
  for (int i = 0; i < this->img_size_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->img_size(i).data(), this->img_size(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->img_size(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  // repeated string image = 2;
  for (int i = 0; i < this->image_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image(i).data(), this->image(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->image(i), target);
  }

  // repeated string voice = 3;
  for (int i = 0; i < this->voice_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voice(i).data(), this->voice(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->voice(i), target);
  }

  // repeated string video = 4;
  for (int i = 0; i < this->video_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->video(i).data(), this->video(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->video(i), target);
  }

  // repeated string img_size = 5;
  for (int i = 0; i < this->img_size_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->img_size(i).data(), this->img_size(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->img_size(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  // repeated string image = 2;
  total_size += 1 * this->image_size();
  for (int i = 0; i < this->image_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->image(i));
  }

  // repeated string voice = 3;
  total_size += 1 * this->voice_size();
  for (int i = 0; i < this->voice_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->voice(i));
  }

  // repeated string video = 4;
  total_size += 1 * this->video_size();
  for (int i = 0; i < this->video_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->video(i));
  }

  // repeated string img_size = 5;
  total_size += 1 * this->img_size_size();
  for (int i = 0; i < this->img_size_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->img_size(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageMeta::MergeFrom(const MessageMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  image_.MergeFrom(from.image_);
  voice_.MergeFrom(from.voice_);
  video_.MergeFrom(from.video_);
  img_size_.MergeFrom(from.img_size_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageMeta::CopyFrom(const MessageMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageMeta::IsInitialized() const {

  return true;
}

void MessageMeta::Swap(MessageMeta* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    image_.Swap(&other->image_);
    voice_.Swap(&other->voice_);
    video_.Swap(&other->video_);
    img_size_.Swap(&other->img_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageMeta_descriptor_;
  metadata.reflection = MessageMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UGC::kMessageMetaFieldNumber;
const int UGC::kGeoFieldNumber;
const int UGC::kTargetFieldNumber;
const int UGC::kCardTypeFieldNumber;
#endif  // !_MSC_VER

UGC::UGC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UGC::InitAsDefaultInstance() {
  message_meta_ = const_cast< ::Cell::MessageMeta*>(&::Cell::MessageMeta::default_instance());
  geo_ = const_cast< ::Cell::Geo*>(&::Cell::Geo::default_instance());
}

UGC::UGC(const UGC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UGC::SharedCtor() {
  _cached_size_ = 0;
  message_meta_ = NULL;
  geo_ = NULL;
  target_ = 0;
  card_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UGC::~UGC() {
  SharedDtor();
}

void UGC::SharedDtor() {
  if (this != default_instance_) {
    delete message_meta_;
    delete geo_;
  }
}

void UGC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UGC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UGC_descriptor_;
}

const UGC& UGC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5fdata_2eproto();
  return *default_instance_;
}

UGC* UGC::default_instance_ = NULL;

UGC* UGC::New() const {
  return new UGC;
}

void UGC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message_meta()) {
      if (message_meta_ != NULL) message_meta_->::Cell::MessageMeta::Clear();
    }
    if (has_geo()) {
      if (geo_ != NULL) geo_->::Cell::Geo::Clear();
    }
    target_ = 0;
    card_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UGC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cell.MessageMeta message_meta = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message_meta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_geo;
        break;
      }

      // optional .Cell.Geo geo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target;
        break;
      }

      // optional .Cell.TargetType target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::TargetType_IsValid(value)) {
            set_target(static_cast< ::Cell::TargetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_card_type;
        break;
      }

      // optional .Cell.CardType card_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::CardType_IsValid(value)) {
            set_card_type(static_cast< ::Cell::CardType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UGC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Cell.MessageMeta message_meta = 1;
  if (has_message_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->message_meta(), output);
  }

  // optional .Cell.Geo geo = 2;
  if (has_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->geo(), output);
  }

  // optional .Cell.TargetType target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->target(), output);
  }

  // optional .Cell.CardType card_type = 4;
  if (has_card_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->card_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UGC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Cell.MessageMeta message_meta = 1;
  if (has_message_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->message_meta(), target);
  }

  // optional .Cell.Geo geo = 2;
  if (has_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->geo(), target);
  }

  // optional .Cell.TargetType target = 3;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->target(), target);
  }

  // optional .Cell.CardType card_type = 4;
  if (has_card_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->card_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UGC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cell.MessageMeta message_meta = 1;
    if (has_message_meta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message_meta());
    }

    // optional .Cell.Geo geo = 2;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo());
    }

    // optional .Cell.TargetType target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->target());
    }

    // optional .Cell.CardType card_type = 4;
    if (has_card_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->card_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UGC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UGC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UGC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UGC::MergeFrom(const UGC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_meta()) {
      mutable_message_meta()->::Cell::MessageMeta::MergeFrom(from.message_meta());
    }
    if (from.has_geo()) {
      mutable_geo()->::Cell::Geo::MergeFrom(from.geo());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_card_type()) {
      set_card_type(from.card_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UGC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UGC::CopyFrom(const UGC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGC::IsInitialized() const {

  if (has_geo()) {
    if (!this->geo().IsInitialized()) return false;
  }
  return true;
}

void UGC::Swap(UGC* other) {
  if (other != this) {
    std::swap(message_meta_, other->message_meta_);
    std::swap(geo_, other->geo_);
    std::swap(target_, other->target_);
    std::swap(card_type_, other->card_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UGC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UGC_descriptor_;
  metadata.reflection = UGC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UGCIdList::kUgcIdFieldNumber;
const int UGCIdList::kOrgUidFieldNumber;
const int UGCIdList::kMsidFieldNumber;
const int UGCIdList::kMstidFieldNumber;
#endif  // !_MSC_VER

UGCIdList::UGCIdList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UGCIdList::InitAsDefaultInstance() {
}

UGCIdList::UGCIdList(const UGCIdList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UGCIdList::SharedCtor() {
  _cached_size_ = 0;
  ugc_id_ = GOOGLE_ULONGLONG(0);
  org_uid_ = 0u;
  msid_ = GOOGLE_ULONGLONG(0);
  mstid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UGCIdList::~UGCIdList() {
  SharedDtor();
}

void UGCIdList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UGCIdList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UGCIdList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UGCIdList_descriptor_;
}

const UGCIdList& UGCIdList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5fdata_2eproto();
  return *default_instance_;
}

UGCIdList* UGCIdList::default_instance_ = NULL;

UGCIdList* UGCIdList::New() const {
  return new UGCIdList;
}

void UGCIdList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ugc_id_ = GOOGLE_ULONGLONG(0);
    org_uid_ = 0u;
    msid_ = GOOGLE_ULONGLONG(0);
    mstid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UGCIdList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ugc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_id_)));
          set_has_ugc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_org_uid;
        break;
      }

      // optional uint32 org_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_org_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &org_uid_)));
          set_has_org_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_msid;
        break;
      }

      // optional uint64 msid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msid_)));
          set_has_msid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mstid;
        break;
      }

      // optional uint64 mstid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mstid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mstid_)));
          set_has_mstid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UGCIdList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ugc_id = 1;
  if (has_ugc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ugc_id(), output);
  }

  // optional uint32 org_uid = 2;
  if (has_org_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->org_uid(), output);
  }

  // optional uint64 msid = 3;
  if (has_msid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->msid(), output);
  }

  // optional uint64 mstid = 4;
  if (has_mstid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->mstid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UGCIdList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ugc_id = 1;
  if (has_ugc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ugc_id(), target);
  }

  // optional uint32 org_uid = 2;
  if (has_org_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->org_uid(), target);
  }

  // optional uint64 msid = 3;
  if (has_msid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->msid(), target);
  }

  // optional uint64 mstid = 4;
  if (has_mstid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->mstid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UGCIdList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ugc_id = 1;
    if (has_ugc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugc_id());
    }

    // optional uint32 org_uid = 2;
    if (has_org_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->org_uid());
    }

    // optional uint64 msid = 3;
    if (has_msid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msid());
    }

    // optional uint64 mstid = 4;
    if (has_mstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mstid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UGCIdList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UGCIdList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UGCIdList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UGCIdList::MergeFrom(const UGCIdList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ugc_id()) {
      set_ugc_id(from.ugc_id());
    }
    if (from.has_org_uid()) {
      set_org_uid(from.org_uid());
    }
    if (from.has_msid()) {
      set_msid(from.msid());
    }
    if (from.has_mstid()) {
      set_mstid(from.mstid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UGCIdList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UGCIdList::CopyFrom(const UGCIdList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGCIdList::IsInitialized() const {

  return true;
}

void UGCIdList::Swap(UGCIdList* other) {
  if (other != this) {
    std::swap(ugc_id_, other->ugc_id_);
    std::swap(org_uid_, other->org_uid_);
    std::swap(msid_, other->msid_);
    std::swap(mstid_, other->mstid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UGCIdList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UGCIdList_descriptor_;
  metadata.reflection = UGCIdList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cell

// @@protoc_insertion_point(global_scope)
