// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: initial.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "initial.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cell {

namespace {

const ::google::protobuf::Descriptor* RegReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegRespMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegRespMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRespMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRespMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitRespMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitRespMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckUserRegReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckUserRegReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckUserRegRespMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckUserRegRespMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_initial_2eproto() {
  protobuf_AddDesc_initial_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "initial.proto");
  GOOGLE_CHECK(file != NULL);
  RegReqMsg_descriptor_ = file->message_type(0);
  static const int RegReqMsg_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReqMsg, session_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReqMsg, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReqMsg, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReqMsg, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReqMsg, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReqMsg, birthday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReqMsg, avada_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReqMsg, usr_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReqMsg, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReqMsg, reg_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReqMsg, avada_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReqMsg, blood_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReqMsg, constellation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReqMsg, zodiac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReqMsg, geo_),
  };
  RegReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegReqMsg_descriptor_,
      RegReqMsg::default_instance_,
      RegReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegReqMsg));
  RegRespMsg_descriptor_ = file->message_type(1);
  static const int RegRespMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegRespMsg, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegRespMsg, user_stat_),
  };
  RegRespMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegRespMsg_descriptor_,
      RegRespMsg::default_instance_,
      RegRespMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegRespMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegRespMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegRespMsg));
  LoginReqMsg_descriptor_ = file->message_type(2);
  static const int LoginReqMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReqMsg, usr_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReqMsg, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReqMsg, geo_),
  };
  LoginReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginReqMsg_descriptor_,
      LoginReqMsg::default_instance_,
      LoginReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginReqMsg));
  LoginRespMsg_descriptor_ = file->message_type(3);
  static const int LoginRespMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRespMsg, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRespMsg, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRespMsg, session_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRespMsg, user_stat_),
  };
  LoginRespMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRespMsg_descriptor_,
      LoginRespMsg::default_instance_,
      LoginRespMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRespMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRespMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRespMsg));
  InitReqMsg_descriptor_ = file->message_type(4);
  static const int InitReqMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitReqMsg, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitReqMsg, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitReqMsg, app_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitReqMsg, app_ver_),
  };
  InitReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitReqMsg_descriptor_,
      InitReqMsg::default_instance_,
      InitReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitReqMsg));
  InitRespMsg_descriptor_ = file->message_type(5);
  static const int InitRespMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRespMsg, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRespMsg, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRespMsg, session_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRespMsg, user_stat_),
  };
  InitRespMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitRespMsg_descriptor_,
      InitRespMsg::default_instance_,
      InitRespMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRespMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRespMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitRespMsg));
  CheckUserRegReqMsg_descriptor_ = file->message_type(6);
  static const int CheckUserRegReqMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUserRegReqMsg, usr_info_),
  };
  CheckUserRegReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckUserRegReqMsg_descriptor_,
      CheckUserRegReqMsg::default_instance_,
      CheckUserRegReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUserRegReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUserRegReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckUserRegReqMsg));
  CheckUserRegRespMsg_descriptor_ = file->message_type(7);
  static const int CheckUserRegRespMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUserRegRespMsg, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUserRegRespMsg, user_stat_),
  };
  CheckUserRegRespMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckUserRegRespMsg_descriptor_,
      CheckUserRegRespMsg::default_instance_,
      CheckUserRegRespMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUserRegRespMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUserRegRespMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckUserRegRespMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_initial_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegReqMsg_descriptor_, &RegReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegRespMsg_descriptor_, &RegRespMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginReqMsg_descriptor_, &LoginReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRespMsg_descriptor_, &LoginRespMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitReqMsg_descriptor_, &InitReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitRespMsg_descriptor_, &InitRespMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckUserRegReqMsg_descriptor_, &CheckUserRegReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckUserRegRespMsg_descriptor_, &CheckUserRegRespMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_initial_2eproto() {
  delete RegReqMsg::default_instance_;
  delete RegReqMsg_reflection_;
  delete RegRespMsg::default_instance_;
  delete RegRespMsg_reflection_;
  delete LoginReqMsg::default_instance_;
  delete LoginReqMsg_reflection_;
  delete LoginRespMsg::default_instance_;
  delete LoginRespMsg_reflection_;
  delete InitReqMsg::default_instance_;
  delete InitReqMsg_reflection_;
  delete InitRespMsg::default_instance_;
  delete InitRespMsg_reflection_;
  delete CheckUserRegReqMsg::default_instance_;
  delete CheckUserRegReqMsg_reflection_;
  delete CheckUserRegRespMsg::default_instance_;
  delete CheckUserRegRespMsg_reflection_;
}

void protobuf_AddDesc_initial_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cell::protobuf_AddDesc_common_5fdata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rinitial.proto\022\004Cell\032\021common_data.proto"
    "\"\374\002\n\tRegReqMsg\022\025\n\rsession_token\030\001 \001(\t\022\013\n"
    "\003uid\030\002 \001(\r\022\r\n\005phone\030\003 \001(\t\022\r\n\005email\030\004 \001(\t"
    "\022\034\n\006gender\030\005 \001(\0162\014.Cell.Gender\022\020\n\010birthd"
    "ay\030\006 \001(\t\022\021\n\tavada_url\030\007 \001(\t\022\020\n\010usr_name\030"
    "\010 \001(\t\022\020\n\010password\030\t \001(\t\022#\n\nreg_source\030\n "
    "\001(\0162\017.Cell.RegSource\022\022\n\navada_size\030\013 \001(\t"
    "\022#\n\nblood_type\030\014 \001(\0162\017.Cell.BloodType\022.\n"
    "\rconstellation\030\r \001(\0162\027.Cell.Constellatio"
    "nType\022 \n\006zodiac\030\016 \001(\0162\020.Cell.ZodiacType\022"
    "\026\n\003geo\030\017 \001(\0132\t.Cell.Geo\"P\n\nRegRespMsg\022\037\n"
    "\010ret_code\030\001 \002(\0162\r.Cell.RetCode\022!\n\tuser_s"
    "tat\030\002 \001(\0162\016.Cell.UserStat\"I\n\013LoginReqMsg"
    "\022\020\n\010usr_info\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\022\026\n\003"
    "geo\030\003 \001(\0132\t.Cell.Geo\"v\n\014LoginRespMsg\022\037\n\010"
    "ret_code\030\001 \002(\0162\r.Cell.RetCode\022\013\n\003uid\030\002 \001"
    "(\r\022\025\n\rsession_token\030\003 \001(\t\022!\n\tuser_stat\030\004"
    " \001(\0162\016.Cell.UserStat\"h\n\nInitReqMsg\022\021\n\tde"
    "vice_id\030\001 \001(\t\022%\n\013device_type\030\002 \001(\0162\020.Cel"
    "l.DeviceType\022\017\n\007app_key\030\003 \001(\t\022\017\n\007app_ver"
    "\030\004 \001(\t\"u\n\013InitRespMsg\022\037\n\010ret_code\030\001 \002(\0162"
    "\r.Cell.RetCode\022\013\n\003uid\030\002 \001(\r\022\025\n\rsession_t"
    "oken\030\003 \001(\t\022!\n\tuser_stat\030\004 \001(\0162\016.Cell.Use"
    "rStat\"&\n\022CheckUserRegReqMsg\022\020\n\010usr_info\030"
    "\001 \001(\t\"Y\n\023CheckUserRegRespMsg\022\037\n\010ret_code"
    "\030\001 \002(\0162\r.Cell.RetCode\022!\n\tuser_stat\030\002 \001(\016"
    "2\016.Cell.UserStat", 1056);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "initial.proto", &protobuf_RegisterTypes);
  RegReqMsg::default_instance_ = new RegReqMsg();
  RegRespMsg::default_instance_ = new RegRespMsg();
  LoginReqMsg::default_instance_ = new LoginReqMsg();
  LoginRespMsg::default_instance_ = new LoginRespMsg();
  InitReqMsg::default_instance_ = new InitReqMsg();
  InitRespMsg::default_instance_ = new InitRespMsg();
  CheckUserRegReqMsg::default_instance_ = new CheckUserRegReqMsg();
  CheckUserRegRespMsg::default_instance_ = new CheckUserRegRespMsg();
  RegReqMsg::default_instance_->InitAsDefaultInstance();
  RegRespMsg::default_instance_->InitAsDefaultInstance();
  LoginReqMsg::default_instance_->InitAsDefaultInstance();
  LoginRespMsg::default_instance_->InitAsDefaultInstance();
  InitReqMsg::default_instance_->InitAsDefaultInstance();
  InitRespMsg::default_instance_->InitAsDefaultInstance();
  CheckUserRegReqMsg::default_instance_->InitAsDefaultInstance();
  CheckUserRegRespMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_initial_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_initial_2eproto {
  StaticDescriptorInitializer_initial_2eproto() {
    protobuf_AddDesc_initial_2eproto();
  }
} static_descriptor_initializer_initial_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RegReqMsg::kSessionTokenFieldNumber;
const int RegReqMsg::kUidFieldNumber;
const int RegReqMsg::kPhoneFieldNumber;
const int RegReqMsg::kEmailFieldNumber;
const int RegReqMsg::kGenderFieldNumber;
const int RegReqMsg::kBirthdayFieldNumber;
const int RegReqMsg::kAvadaUrlFieldNumber;
const int RegReqMsg::kUsrNameFieldNumber;
const int RegReqMsg::kPasswordFieldNumber;
const int RegReqMsg::kRegSourceFieldNumber;
const int RegReqMsg::kAvadaSizeFieldNumber;
const int RegReqMsg::kBloodTypeFieldNumber;
const int RegReqMsg::kConstellationFieldNumber;
const int RegReqMsg::kZodiacFieldNumber;
const int RegReqMsg::kGeoFieldNumber;
#endif  // !_MSC_VER

RegReqMsg::RegReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegReqMsg::InitAsDefaultInstance() {
  geo_ = const_cast< ::Cell::Geo*>(&::Cell::Geo::default_instance());
}

RegReqMsg::RegReqMsg(const RegReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegReqMsg::SharedCtor() {
  _cached_size_ = 0;
  session_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = 0u;
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_ = 0;
  birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  avada_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reg_source_ = 0;
  avada_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  blood_type_ = 1;
  constellation_ = 1;
  zodiac_ = 1;
  geo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegReqMsg::~RegReqMsg() {
  SharedDtor();
}

void RegReqMsg::SharedDtor() {
  if (session_token_ != &::google::protobuf::internal::kEmptyString) {
    delete session_token_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    delete birthday_;
  }
  if (avada_url_ != &::google::protobuf::internal::kEmptyString) {
    delete avada_url_;
  }
  if (usr_name_ != &::google::protobuf::internal::kEmptyString) {
    delete usr_name_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (avada_size_ != &::google::protobuf::internal::kEmptyString) {
    delete avada_size_;
  }
  if (this != default_instance_) {
    delete geo_;
  }
}

void RegReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegReqMsg_descriptor_;
}

const RegReqMsg& RegReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_initial_2eproto();
  return *default_instance_;
}

RegReqMsg* RegReqMsg::default_instance_ = NULL;

RegReqMsg* RegReqMsg::New() const {
  return new RegReqMsg;
}

void RegReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session_token()) {
      if (session_token_ != &::google::protobuf::internal::kEmptyString) {
        session_token_->clear();
      }
    }
    uid_ = 0u;
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    gender_ = 0;
    if (has_birthday()) {
      if (birthday_ != &::google::protobuf::internal::kEmptyString) {
        birthday_->clear();
      }
    }
    if (has_avada_url()) {
      if (avada_url_ != &::google::protobuf::internal::kEmptyString) {
        avada_url_->clear();
      }
    }
    if (has_usr_name()) {
      if (usr_name_ != &::google::protobuf::internal::kEmptyString) {
        usr_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    reg_source_ = 0;
    if (has_avada_size()) {
      if (avada_size_ != &::google::protobuf::internal::kEmptyString) {
        avada_size_->clear();
      }
    }
    blood_type_ = 1;
    constellation_ = 1;
    zodiac_ = 1;
    if (has_geo()) {
      if (geo_ != NULL) geo_->::Cell::Geo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_token().data(), this->session_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_phone;
        break;
      }

      // optional string phone = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_email;
        break;
      }

      // optional string email = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gender;
        break;
      }

      // optional .Cell.Gender gender = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::Gender_IsValid(value)) {
            set_gender(static_cast< ::Cell::Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_birthday;
        break;
      }

      // optional string birthday = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_birthday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_birthday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->birthday().data(), this->birthday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_avada_url;
        break;
      }

      // optional string avada_url = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avada_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avada_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->avada_url().data(), this->avada_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_usr_name;
        break;
      }

      // optional string usr_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usr_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usr_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usr_name().data(), this->usr_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_password;
        break;
      }

      // optional string password = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_reg_source;
        break;
      }

      // optional .Cell.RegSource reg_source = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::RegSource_IsValid(value)) {
            set_reg_source(static_cast< ::Cell::RegSource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_avada_size;
        break;
      }

      // optional string avada_size = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avada_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avada_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->avada_size().data(), this->avada_size().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_blood_type;
        break;
      }

      // optional .Cell.BloodType blood_type = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::BloodType_IsValid(value)) {
            set_blood_type(static_cast< ::Cell::BloodType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_constellation;
        break;
      }

      // optional .Cell.ConstellationType constellation = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_constellation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::ConstellationType_IsValid(value)) {
            set_constellation(static_cast< ::Cell::ConstellationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_zodiac;
        break;
      }

      // optional .Cell.ZodiacType zodiac = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zodiac:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::ZodiacType_IsValid(value)) {
            set_zodiac(static_cast< ::Cell::ZodiacType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_geo;
        break;
      }

      // optional .Cell.Geo geo = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string session_token = 1;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->session_token(), output);
  }

  // optional uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // optional string phone = 3;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->phone(), output);
  }

  // optional string email = 4;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->email(), output);
  }

  // optional .Cell.Gender gender = 5;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->gender(), output);
  }

  // optional string birthday = 6;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->birthday(), output);
  }

  // optional string avada_url = 7;
  if (has_avada_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avada_url().data(), this->avada_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->avada_url(), output);
  }

  // optional string usr_name = 8;
  if (has_usr_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usr_name().data(), this->usr_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->usr_name(), output);
  }

  // optional string password = 9;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->password(), output);
  }

  // optional .Cell.RegSource reg_source = 10;
  if (has_reg_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->reg_source(), output);
  }

  // optional string avada_size = 11;
  if (has_avada_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avada_size().data(), this->avada_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->avada_size(), output);
  }

  // optional .Cell.BloodType blood_type = 12;
  if (has_blood_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->blood_type(), output);
  }

  // optional .Cell.ConstellationType constellation = 13;
  if (has_constellation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->constellation(), output);
  }

  // optional .Cell.ZodiacType zodiac = 14;
  if (has_zodiac()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->zodiac(), output);
  }

  // optional .Cell.Geo geo = 15;
  if (has_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->geo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string session_token = 1;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_token(), target);
  }

  // optional uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // optional string phone = 3;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->phone(), target);
  }

  // optional string email = 4;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->email(), target);
  }

  // optional .Cell.Gender gender = 5;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->gender(), target);
  }

  // optional string birthday = 6;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->birthday(), target);
  }

  // optional string avada_url = 7;
  if (has_avada_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avada_url().data(), this->avada_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->avada_url(), target);
  }

  // optional string usr_name = 8;
  if (has_usr_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usr_name().data(), this->usr_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->usr_name(), target);
  }

  // optional string password = 9;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->password(), target);
  }

  // optional .Cell.RegSource reg_source = 10;
  if (has_reg_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->reg_source(), target);
  }

  // optional string avada_size = 11;
  if (has_avada_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avada_size().data(), this->avada_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->avada_size(), target);
  }

  // optional .Cell.BloodType blood_type = 12;
  if (has_blood_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->blood_type(), target);
  }

  // optional .Cell.ConstellationType constellation = 13;
  if (has_constellation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->constellation(), target);
  }

  // optional .Cell.ZodiacType zodiac = 14;
  if (has_zodiac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->zodiac(), target);
  }

  // optional .Cell.Geo geo = 15;
  if (has_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->geo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegReqMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string session_token = 1;
    if (has_session_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_token());
    }

    // optional uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional string phone = 3;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional string email = 4;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional .Cell.Gender gender = 5;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional string birthday = 6;
    if (has_birthday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->birthday());
    }

    // optional string avada_url = 7;
    if (has_avada_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avada_url());
    }

    // optional string usr_name = 8;
    if (has_usr_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usr_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string password = 9;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional .Cell.RegSource reg_source = 10;
    if (has_reg_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reg_source());
    }

    // optional string avada_size = 11;
    if (has_avada_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avada_size());
    }

    // optional .Cell.BloodType blood_type = 12;
    if (has_blood_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->blood_type());
    }

    // optional .Cell.ConstellationType constellation = 13;
    if (has_constellation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->constellation());
    }

    // optional .Cell.ZodiacType zodiac = 14;
    if (has_zodiac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->zodiac());
    }

    // optional .Cell.Geo geo = 15;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegReqMsg::MergeFrom(const RegReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_token()) {
      set_session_token(from.session_token());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_birthday()) {
      set_birthday(from.birthday());
    }
    if (from.has_avada_url()) {
      set_avada_url(from.avada_url());
    }
    if (from.has_usr_name()) {
      set_usr_name(from.usr_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_reg_source()) {
      set_reg_source(from.reg_source());
    }
    if (from.has_avada_size()) {
      set_avada_size(from.avada_size());
    }
    if (from.has_blood_type()) {
      set_blood_type(from.blood_type());
    }
    if (from.has_constellation()) {
      set_constellation(from.constellation());
    }
    if (from.has_zodiac()) {
      set_zodiac(from.zodiac());
    }
    if (from.has_geo()) {
      mutable_geo()->::Cell::Geo::MergeFrom(from.geo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegReqMsg::CopyFrom(const RegReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegReqMsg::IsInitialized() const {

  if (has_geo()) {
    if (!this->geo().IsInitialized()) return false;
  }
  return true;
}

void RegReqMsg::Swap(RegReqMsg* other) {
  if (other != this) {
    std::swap(session_token_, other->session_token_);
    std::swap(uid_, other->uid_);
    std::swap(phone_, other->phone_);
    std::swap(email_, other->email_);
    std::swap(gender_, other->gender_);
    std::swap(birthday_, other->birthday_);
    std::swap(avada_url_, other->avada_url_);
    std::swap(usr_name_, other->usr_name_);
    std::swap(password_, other->password_);
    std::swap(reg_source_, other->reg_source_);
    std::swap(avada_size_, other->avada_size_);
    std::swap(blood_type_, other->blood_type_);
    std::swap(constellation_, other->constellation_);
    std::swap(zodiac_, other->zodiac_);
    std::swap(geo_, other->geo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegReqMsg_descriptor_;
  metadata.reflection = RegReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegRespMsg::kRetCodeFieldNumber;
const int RegRespMsg::kUserStatFieldNumber;
#endif  // !_MSC_VER

RegRespMsg::RegRespMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegRespMsg::InitAsDefaultInstance() {
}

RegRespMsg::RegRespMsg(const RegRespMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegRespMsg::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  user_stat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegRespMsg::~RegRespMsg() {
  SharedDtor();
}

void RegRespMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegRespMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegRespMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegRespMsg_descriptor_;
}

const RegRespMsg& RegRespMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_initial_2eproto();
  return *default_instance_;
}

RegRespMsg* RegRespMsg::default_instance_ = NULL;

RegRespMsg* RegRespMsg::New() const {
  return new RegRespMsg;
}

void RegRespMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    user_stat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegRespMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Cell.RetCode ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::RetCode_IsValid(value)) {
            set_ret_code(static_cast< ::Cell::RetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_stat;
        break;
      }

      // optional .Cell.UserStat user_stat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_stat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::UserStat_IsValid(value)) {
            set_user_stat(static_cast< ::Cell::UserStat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegRespMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret_code(), output);
  }

  // optional .Cell.UserStat user_stat = 2;
  if (has_user_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->user_stat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegRespMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret_code(), target);
  }

  // optional .Cell.UserStat user_stat = 2;
  if (has_user_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->user_stat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegRespMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Cell.RetCode ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret_code());
    }

    // optional .Cell.UserStat user_stat = 2;
    if (has_user_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_stat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegRespMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegRespMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegRespMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegRespMsg::MergeFrom(const RegRespMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_user_stat()) {
      set_user_stat(from.user_stat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegRespMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegRespMsg::CopyFrom(const RegRespMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegRespMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RegRespMsg::Swap(RegRespMsg* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(user_stat_, other->user_stat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegRespMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegRespMsg_descriptor_;
  metadata.reflection = RegRespMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginReqMsg::kUsrInfoFieldNumber;
const int LoginReqMsg::kPasswordFieldNumber;
const int LoginReqMsg::kGeoFieldNumber;
#endif  // !_MSC_VER

LoginReqMsg::LoginReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginReqMsg::InitAsDefaultInstance() {
  geo_ = const_cast< ::Cell::Geo*>(&::Cell::Geo::default_instance());
}

LoginReqMsg::LoginReqMsg(const LoginReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginReqMsg::SharedCtor() {
  _cached_size_ = 0;
  usr_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  geo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginReqMsg::~LoginReqMsg() {
  SharedDtor();
}

void LoginReqMsg::SharedDtor() {
  if (usr_info_ != &::google::protobuf::internal::kEmptyString) {
    delete usr_info_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
    delete geo_;
  }
}

void LoginReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginReqMsg_descriptor_;
}

const LoginReqMsg& LoginReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_initial_2eproto();
  return *default_instance_;
}

LoginReqMsg* LoginReqMsg::default_instance_ = NULL;

LoginReqMsg* LoginReqMsg::New() const {
  return new LoginReqMsg;
}

void LoginReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_usr_info()) {
      if (usr_info_ != &::google::protobuf::internal::kEmptyString) {
        usr_info_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_geo()) {
      if (geo_ != NULL) geo_->::Cell::Geo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string usr_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usr_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usr_info().data(), this->usr_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_geo;
        break;
      }

      // optional .Cell.Geo geo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string usr_info = 1;
  if (has_usr_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usr_info().data(), this->usr_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->usr_info(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // optional .Cell.Geo geo = 3;
  if (has_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->geo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string usr_info = 1;
  if (has_usr_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usr_info().data(), this->usr_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->usr_info(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional .Cell.Geo geo = 3;
  if (has_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->geo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginReqMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string usr_info = 1;
    if (has_usr_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usr_info());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional .Cell.Geo geo = 3;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginReqMsg::MergeFrom(const LoginReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usr_info()) {
      set_usr_info(from.usr_info());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_geo()) {
      mutable_geo()->::Cell::Geo::MergeFrom(from.geo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReqMsg::CopyFrom(const LoginReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReqMsg::IsInitialized() const {

  if (has_geo()) {
    if (!this->geo().IsInitialized()) return false;
  }
  return true;
}

void LoginReqMsg::Swap(LoginReqMsg* other) {
  if (other != this) {
    std::swap(usr_info_, other->usr_info_);
    std::swap(password_, other->password_);
    std::swap(geo_, other->geo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginReqMsg_descriptor_;
  metadata.reflection = LoginReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRespMsg::kRetCodeFieldNumber;
const int LoginRespMsg::kUidFieldNumber;
const int LoginRespMsg::kSessionTokenFieldNumber;
const int LoginRespMsg::kUserStatFieldNumber;
#endif  // !_MSC_VER

LoginRespMsg::LoginRespMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRespMsg::InitAsDefaultInstance() {
}

LoginRespMsg::LoginRespMsg(const LoginRespMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRespMsg::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  uid_ = 0u;
  session_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_stat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRespMsg::~LoginRespMsg() {
  SharedDtor();
}

void LoginRespMsg::SharedDtor() {
  if (session_token_ != &::google::protobuf::internal::kEmptyString) {
    delete session_token_;
  }
  if (this != default_instance_) {
  }
}

void LoginRespMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRespMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRespMsg_descriptor_;
}

const LoginRespMsg& LoginRespMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_initial_2eproto();
  return *default_instance_;
}

LoginRespMsg* LoginRespMsg::default_instance_ = NULL;

LoginRespMsg* LoginRespMsg::New() const {
  return new LoginRespMsg;
}

void LoginRespMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    uid_ = 0u;
    if (has_session_token()) {
      if (session_token_ != &::google::protobuf::internal::kEmptyString) {
        session_token_->clear();
      }
    }
    user_stat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRespMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Cell.RetCode ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::RetCode_IsValid(value)) {
            set_ret_code(static_cast< ::Cell::RetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_session_token;
        break;
      }

      // optional string session_token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_token().data(), this->session_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_user_stat;
        break;
      }

      // optional .Cell.UserStat user_stat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_stat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::UserStat_IsValid(value)) {
            set_user_stat(static_cast< ::Cell::UserStat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRespMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret_code(), output);
  }

  // optional uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // optional string session_token = 3;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->session_token(), output);
  }

  // optional .Cell.UserStat user_stat = 4;
  if (has_user_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->user_stat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRespMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret_code(), target);
  }

  // optional uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // optional string session_token = 3;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->session_token(), target);
  }

  // optional .Cell.UserStat user_stat = 4;
  if (has_user_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->user_stat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRespMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Cell.RetCode ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret_code());
    }

    // optional uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional string session_token = 3;
    if (has_session_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_token());
    }

    // optional .Cell.UserStat user_stat = 4;
    if (has_user_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_stat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRespMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRespMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRespMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRespMsg::MergeFrom(const LoginRespMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_session_token()) {
      set_session_token(from.session_token());
    }
    if (from.has_user_stat()) {
      set_user_stat(from.user_stat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRespMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRespMsg::CopyFrom(const LoginRespMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRespMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginRespMsg::Swap(LoginRespMsg* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(uid_, other->uid_);
    std::swap(session_token_, other->session_token_);
    std::swap(user_stat_, other->user_stat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRespMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRespMsg_descriptor_;
  metadata.reflection = LoginRespMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitReqMsg::kDeviceIdFieldNumber;
const int InitReqMsg::kDeviceTypeFieldNumber;
const int InitReqMsg::kAppKeyFieldNumber;
const int InitReqMsg::kAppVerFieldNumber;
#endif  // !_MSC_VER

InitReqMsg::InitReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitReqMsg::InitAsDefaultInstance() {
}

InitReqMsg::InitReqMsg(const InitReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitReqMsg::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_type_ = 0;
  app_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitReqMsg::~InitReqMsg() {
  SharedDtor();
}

void InitReqMsg::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (app_key_ != &::google::protobuf::internal::kEmptyString) {
    delete app_key_;
  }
  if (app_ver_ != &::google::protobuf::internal::kEmptyString) {
    delete app_ver_;
  }
  if (this != default_instance_) {
  }
}

void InitReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitReqMsg_descriptor_;
}

const InitReqMsg& InitReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_initial_2eproto();
  return *default_instance_;
}

InitReqMsg* InitReqMsg::default_instance_ = NULL;

InitReqMsg* InitReqMsg::New() const {
  return new InitReqMsg;
}

void InitReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    device_type_ = 0;
    if (has_app_key()) {
      if (app_key_ != &::google::protobuf::internal::kEmptyString) {
        app_key_->clear();
      }
    }
    if (has_app_ver()) {
      if (app_ver_ != &::google::protobuf::internal::kEmptyString) {
        app_ver_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_device_type;
        break;
      }

      // optional .Cell.DeviceType device_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_device_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::DeviceType_IsValid(value)) {
            set_device_type(static_cast< ::Cell::DeviceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_app_key;
        break;
      }

      // optional string app_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_key().data(), this->app_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_app_ver;
        break;
      }

      // optional string app_ver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_ver().data(), this->app_ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_id(), output);
  }

  // optional .Cell.DeviceType device_type = 2;
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->device_type(), output);
  }

  // optional string app_key = 3;
  if (has_app_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_key().data(), this->app_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->app_key(), output);
  }

  // optional string app_ver = 4;
  if (has_app_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_ver().data(), this->app_ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->app_ver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional .Cell.DeviceType device_type = 2;
  if (has_device_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->device_type(), target);
  }

  // optional string app_key = 3;
  if (has_app_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_key().data(), this->app_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->app_key(), target);
  }

  // optional string app_ver = 4;
  if (has_app_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_ver().data(), this->app_ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->app_ver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitReqMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional .Cell.DeviceType device_type = 2;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
    }

    // optional string app_key = 3;
    if (has_app_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_key());
    }

    // optional string app_ver = 4;
    if (has_app_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_ver());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitReqMsg::MergeFrom(const InitReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
    if (from.has_app_key()) {
      set_app_key(from.app_key());
    }
    if (from.has_app_ver()) {
      set_app_ver(from.app_ver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitReqMsg::CopyFrom(const InitReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitReqMsg::IsInitialized() const {

  return true;
}

void InitReqMsg::Swap(InitReqMsg* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(device_type_, other->device_type_);
    std::swap(app_key_, other->app_key_);
    std::swap(app_ver_, other->app_ver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitReqMsg_descriptor_;
  metadata.reflection = InitReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitRespMsg::kRetCodeFieldNumber;
const int InitRespMsg::kUidFieldNumber;
const int InitRespMsg::kSessionTokenFieldNumber;
const int InitRespMsg::kUserStatFieldNumber;
#endif  // !_MSC_VER

InitRespMsg::InitRespMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitRespMsg::InitAsDefaultInstance() {
}

InitRespMsg::InitRespMsg(const InitRespMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitRespMsg::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  uid_ = 0u;
  session_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_stat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitRespMsg::~InitRespMsg() {
  SharedDtor();
}

void InitRespMsg::SharedDtor() {
  if (session_token_ != &::google::protobuf::internal::kEmptyString) {
    delete session_token_;
  }
  if (this != default_instance_) {
  }
}

void InitRespMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitRespMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitRespMsg_descriptor_;
}

const InitRespMsg& InitRespMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_initial_2eproto();
  return *default_instance_;
}

InitRespMsg* InitRespMsg::default_instance_ = NULL;

InitRespMsg* InitRespMsg::New() const {
  return new InitRespMsg;
}

void InitRespMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    uid_ = 0u;
    if (has_session_token()) {
      if (session_token_ != &::google::protobuf::internal::kEmptyString) {
        session_token_->clear();
      }
    }
    user_stat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitRespMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Cell.RetCode ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::RetCode_IsValid(value)) {
            set_ret_code(static_cast< ::Cell::RetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_session_token;
        break;
      }

      // optional string session_token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_token().data(), this->session_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_user_stat;
        break;
      }

      // optional .Cell.UserStat user_stat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_stat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::UserStat_IsValid(value)) {
            set_user_stat(static_cast< ::Cell::UserStat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitRespMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret_code(), output);
  }

  // optional uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // optional string session_token = 3;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->session_token(), output);
  }

  // optional .Cell.UserStat user_stat = 4;
  if (has_user_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->user_stat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitRespMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret_code(), target);
  }

  // optional uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // optional string session_token = 3;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->session_token(), target);
  }

  // optional .Cell.UserStat user_stat = 4;
  if (has_user_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->user_stat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitRespMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Cell.RetCode ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret_code());
    }

    // optional uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional string session_token = 3;
    if (has_session_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_token());
    }

    // optional .Cell.UserStat user_stat = 4;
    if (has_user_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_stat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitRespMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitRespMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitRespMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitRespMsg::MergeFrom(const InitRespMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_session_token()) {
      set_session_token(from.session_token());
    }
    if (from.has_user_stat()) {
      set_user_stat(from.user_stat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitRespMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitRespMsg::CopyFrom(const InitRespMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitRespMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InitRespMsg::Swap(InitRespMsg* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(uid_, other->uid_);
    std::swap(session_token_, other->session_token_);
    std::swap(user_stat_, other->user_stat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitRespMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitRespMsg_descriptor_;
  metadata.reflection = InitRespMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckUserRegReqMsg::kUsrInfoFieldNumber;
#endif  // !_MSC_VER

CheckUserRegReqMsg::CheckUserRegReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckUserRegReqMsg::InitAsDefaultInstance() {
}

CheckUserRegReqMsg::CheckUserRegReqMsg(const CheckUserRegReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckUserRegReqMsg::SharedCtor() {
  _cached_size_ = 0;
  usr_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckUserRegReqMsg::~CheckUserRegReqMsg() {
  SharedDtor();
}

void CheckUserRegReqMsg::SharedDtor() {
  if (usr_info_ != &::google::protobuf::internal::kEmptyString) {
    delete usr_info_;
  }
  if (this != default_instance_) {
  }
}

void CheckUserRegReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckUserRegReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckUserRegReqMsg_descriptor_;
}

const CheckUserRegReqMsg& CheckUserRegReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_initial_2eproto();
  return *default_instance_;
}

CheckUserRegReqMsg* CheckUserRegReqMsg::default_instance_ = NULL;

CheckUserRegReqMsg* CheckUserRegReqMsg::New() const {
  return new CheckUserRegReqMsg;
}

void CheckUserRegReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_usr_info()) {
      if (usr_info_ != &::google::protobuf::internal::kEmptyString) {
        usr_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckUserRegReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string usr_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usr_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usr_info().data(), this->usr_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckUserRegReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string usr_info = 1;
  if (has_usr_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usr_info().data(), this->usr_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->usr_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckUserRegReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string usr_info = 1;
  if (has_usr_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usr_info().data(), this->usr_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->usr_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckUserRegReqMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string usr_info = 1;
    if (has_usr_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usr_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckUserRegReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckUserRegReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckUserRegReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckUserRegReqMsg::MergeFrom(const CheckUserRegReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usr_info()) {
      set_usr_info(from.usr_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckUserRegReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckUserRegReqMsg::CopyFrom(const CheckUserRegReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckUserRegReqMsg::IsInitialized() const {

  return true;
}

void CheckUserRegReqMsg::Swap(CheckUserRegReqMsg* other) {
  if (other != this) {
    std::swap(usr_info_, other->usr_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckUserRegReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckUserRegReqMsg_descriptor_;
  metadata.reflection = CheckUserRegReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckUserRegRespMsg::kRetCodeFieldNumber;
const int CheckUserRegRespMsg::kUserStatFieldNumber;
#endif  // !_MSC_VER

CheckUserRegRespMsg::CheckUserRegRespMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckUserRegRespMsg::InitAsDefaultInstance() {
}

CheckUserRegRespMsg::CheckUserRegRespMsg(const CheckUserRegRespMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckUserRegRespMsg::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  user_stat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckUserRegRespMsg::~CheckUserRegRespMsg() {
  SharedDtor();
}

void CheckUserRegRespMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckUserRegRespMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckUserRegRespMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckUserRegRespMsg_descriptor_;
}

const CheckUserRegRespMsg& CheckUserRegRespMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_initial_2eproto();
  return *default_instance_;
}

CheckUserRegRespMsg* CheckUserRegRespMsg::default_instance_ = NULL;

CheckUserRegRespMsg* CheckUserRegRespMsg::New() const {
  return new CheckUserRegRespMsg;
}

void CheckUserRegRespMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    user_stat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckUserRegRespMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Cell.RetCode ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::RetCode_IsValid(value)) {
            set_ret_code(static_cast< ::Cell::RetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_stat;
        break;
      }

      // optional .Cell.UserStat user_stat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_stat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::UserStat_IsValid(value)) {
            set_user_stat(static_cast< ::Cell::UserStat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckUserRegRespMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret_code(), output);
  }

  // optional .Cell.UserStat user_stat = 2;
  if (has_user_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->user_stat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckUserRegRespMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret_code(), target);
  }

  // optional .Cell.UserStat user_stat = 2;
  if (has_user_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->user_stat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckUserRegRespMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Cell.RetCode ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret_code());
    }

    // optional .Cell.UserStat user_stat = 2;
    if (has_user_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_stat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckUserRegRespMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckUserRegRespMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckUserRegRespMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckUserRegRespMsg::MergeFrom(const CheckUserRegRespMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_user_stat()) {
      set_user_stat(from.user_stat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckUserRegRespMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckUserRegRespMsg::CopyFrom(const CheckUserRegRespMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckUserRegRespMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CheckUserRegRespMsg::Swap(CheckUserRegRespMsg* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(user_stat_, other->user_stat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckUserRegRespMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckUserRegRespMsg_descriptor_;
  metadata.reflection = CheckUserRegRespMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cell

// @@protoc_insertion_point(global_scope)
