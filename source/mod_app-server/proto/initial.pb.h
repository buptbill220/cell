// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: initial.proto

#ifndef PROTOBUF_initial_2eproto__INCLUDED
#define PROTOBUF_initial_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common_data.pb.h"
// @@protoc_insertion_point(includes)

namespace Cell {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_initial_2eproto();
void protobuf_AssignDesc_initial_2eproto();
void protobuf_ShutdownFile_initial_2eproto();

class RegReqMsg;
class RegRespMsg;
class LoginReqMsg;
class LoginRespMsg;
class InitReqMsg;
class InitRespMsg;
class CheckUserRegReqMsg;
class CheckUserRegRespMsg;

// ===================================================================

class RegReqMsg : public ::google::protobuf::Message {
 public:
  RegReqMsg();
  virtual ~RegReqMsg();

  RegReqMsg(const RegReqMsg& from);

  inline RegReqMsg& operator=(const RegReqMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegReqMsg& default_instance();

  void Swap(RegReqMsg* other);

  // implements Message ----------------------------------------------

  RegReqMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegReqMsg& from);
  void MergeFrom(const RegReqMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string session_token = 1;
  inline bool has_session_token() const;
  inline void clear_session_token();
  static const int kSessionTokenFieldNumber = 1;
  inline const ::std::string& session_token() const;
  inline void set_session_token(const ::std::string& value);
  inline void set_session_token(const char* value);
  inline void set_session_token(const char* value, size_t size);
  inline ::std::string* mutable_session_token();
  inline ::std::string* release_session_token();
  inline void set_allocated_session_token(::std::string* session_token);

  // optional uint32 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional string phone = 3;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 3;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // optional string email = 4;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 4;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // optional .Cell.Gender gender = 5;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 5;
  inline ::Cell::Gender gender() const;
  inline void set_gender(::Cell::Gender value);

  // optional string birthday = 6;
  inline bool has_birthday() const;
  inline void clear_birthday();
  static const int kBirthdayFieldNumber = 6;
  inline const ::std::string& birthday() const;
  inline void set_birthday(const ::std::string& value);
  inline void set_birthday(const char* value);
  inline void set_birthday(const char* value, size_t size);
  inline ::std::string* mutable_birthday();
  inline ::std::string* release_birthday();
  inline void set_allocated_birthday(::std::string* birthday);

  // optional string avada_url = 7;
  inline bool has_avada_url() const;
  inline void clear_avada_url();
  static const int kAvadaUrlFieldNumber = 7;
  inline const ::std::string& avada_url() const;
  inline void set_avada_url(const ::std::string& value);
  inline void set_avada_url(const char* value);
  inline void set_avada_url(const char* value, size_t size);
  inline ::std::string* mutable_avada_url();
  inline ::std::string* release_avada_url();
  inline void set_allocated_avada_url(::std::string* avada_url);

  // optional string usr_name = 8;
  inline bool has_usr_name() const;
  inline void clear_usr_name();
  static const int kUsrNameFieldNumber = 8;
  inline const ::std::string& usr_name() const;
  inline void set_usr_name(const ::std::string& value);
  inline void set_usr_name(const char* value);
  inline void set_usr_name(const char* value, size_t size);
  inline ::std::string* mutable_usr_name();
  inline ::std::string* release_usr_name();
  inline void set_allocated_usr_name(::std::string* usr_name);

  // optional string password = 9;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 9;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional .Cell.RegSource reg_source = 10;
  inline bool has_reg_source() const;
  inline void clear_reg_source();
  static const int kRegSourceFieldNumber = 10;
  inline ::Cell::RegSource reg_source() const;
  inline void set_reg_source(::Cell::RegSource value);

  // optional string avada_size = 11;
  inline bool has_avada_size() const;
  inline void clear_avada_size();
  static const int kAvadaSizeFieldNumber = 11;
  inline const ::std::string& avada_size() const;
  inline void set_avada_size(const ::std::string& value);
  inline void set_avada_size(const char* value);
  inline void set_avada_size(const char* value, size_t size);
  inline ::std::string* mutable_avada_size();
  inline ::std::string* release_avada_size();
  inline void set_allocated_avada_size(::std::string* avada_size);

  // optional .Cell.BloodType blood_type = 12;
  inline bool has_blood_type() const;
  inline void clear_blood_type();
  static const int kBloodTypeFieldNumber = 12;
  inline ::Cell::BloodType blood_type() const;
  inline void set_blood_type(::Cell::BloodType value);

  // optional .Cell.ConstellationType constellation = 13;
  inline bool has_constellation() const;
  inline void clear_constellation();
  static const int kConstellationFieldNumber = 13;
  inline ::Cell::ConstellationType constellation() const;
  inline void set_constellation(::Cell::ConstellationType value);

  // optional .Cell.ZodiacType zodiac = 14;
  inline bool has_zodiac() const;
  inline void clear_zodiac();
  static const int kZodiacFieldNumber = 14;
  inline ::Cell::ZodiacType zodiac() const;
  inline void set_zodiac(::Cell::ZodiacType value);

  // optional .Cell.Geo geo = 15;
  inline bool has_geo() const;
  inline void clear_geo();
  static const int kGeoFieldNumber = 15;
  inline const ::Cell::Geo& geo() const;
  inline ::Cell::Geo* mutable_geo();
  inline ::Cell::Geo* release_geo();
  inline void set_allocated_geo(::Cell::Geo* geo);

  // @@protoc_insertion_point(class_scope:Cell.RegReqMsg)
 private:
  inline void set_has_session_token();
  inline void clear_has_session_token();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_birthday();
  inline void clear_has_birthday();
  inline void set_has_avada_url();
  inline void clear_has_avada_url();
  inline void set_has_usr_name();
  inline void clear_has_usr_name();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_reg_source();
  inline void clear_has_reg_source();
  inline void set_has_avada_size();
  inline void clear_has_avada_size();
  inline void set_has_blood_type();
  inline void clear_has_blood_type();
  inline void set_has_constellation();
  inline void clear_has_constellation();
  inline void set_has_zodiac();
  inline void clear_has_zodiac();
  inline void set_has_geo();
  inline void clear_has_geo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* session_token_;
  ::std::string* phone_;
  ::google::protobuf::uint32 uid_;
  int gender_;
  ::std::string* email_;
  ::std::string* birthday_;
  ::std::string* avada_url_;
  ::std::string* usr_name_;
  ::std::string* password_;
  ::std::string* avada_size_;
  int reg_source_;
  int blood_type_;
  int constellation_;
  int zodiac_;
  ::Cell::Geo* geo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_initial_2eproto();
  friend void protobuf_AssignDesc_initial_2eproto();
  friend void protobuf_ShutdownFile_initial_2eproto();

  void InitAsDefaultInstance();
  static RegReqMsg* default_instance_;
};
// -------------------------------------------------------------------

class RegRespMsg : public ::google::protobuf::Message {
 public:
  RegRespMsg();
  virtual ~RegRespMsg();

  RegRespMsg(const RegRespMsg& from);

  inline RegRespMsg& operator=(const RegRespMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegRespMsg& default_instance();

  void Swap(RegRespMsg* other);

  // implements Message ----------------------------------------------

  RegRespMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegRespMsg& from);
  void MergeFrom(const RegRespMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Cell.RetCode ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::Cell::RetCode ret_code() const;
  inline void set_ret_code(::Cell::RetCode value);

  // optional .Cell.UserStat user_stat = 2;
  inline bool has_user_stat() const;
  inline void clear_user_stat();
  static const int kUserStatFieldNumber = 2;
  inline ::Cell::UserStat user_stat() const;
  inline void set_user_stat(::Cell::UserStat value);

  // @@protoc_insertion_point(class_scope:Cell.RegRespMsg)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_user_stat();
  inline void clear_has_user_stat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_code_;
  int user_stat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_initial_2eproto();
  friend void protobuf_AssignDesc_initial_2eproto();
  friend void protobuf_ShutdownFile_initial_2eproto();

  void InitAsDefaultInstance();
  static RegRespMsg* default_instance_;
};
// -------------------------------------------------------------------

class LoginReqMsg : public ::google::protobuf::Message {
 public:
  LoginReqMsg();
  virtual ~LoginReqMsg();

  LoginReqMsg(const LoginReqMsg& from);

  inline LoginReqMsg& operator=(const LoginReqMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginReqMsg& default_instance();

  void Swap(LoginReqMsg* other);

  // implements Message ----------------------------------------------

  LoginReqMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginReqMsg& from);
  void MergeFrom(const LoginReqMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string usr_info = 1;
  inline bool has_usr_info() const;
  inline void clear_usr_info();
  static const int kUsrInfoFieldNumber = 1;
  inline const ::std::string& usr_info() const;
  inline void set_usr_info(const ::std::string& value);
  inline void set_usr_info(const char* value);
  inline void set_usr_info(const char* value, size_t size);
  inline ::std::string* mutable_usr_info();
  inline ::std::string* release_usr_info();
  inline void set_allocated_usr_info(::std::string* usr_info);

  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional .Cell.Geo geo = 3;
  inline bool has_geo() const;
  inline void clear_geo();
  static const int kGeoFieldNumber = 3;
  inline const ::Cell::Geo& geo() const;
  inline ::Cell::Geo* mutable_geo();
  inline ::Cell::Geo* release_geo();
  inline void set_allocated_geo(::Cell::Geo* geo);

  // @@protoc_insertion_point(class_scope:Cell.LoginReqMsg)
 private:
  inline void set_has_usr_info();
  inline void clear_has_usr_info();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_geo();
  inline void clear_has_geo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* usr_info_;
  ::std::string* password_;
  ::Cell::Geo* geo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_initial_2eproto();
  friend void protobuf_AssignDesc_initial_2eproto();
  friend void protobuf_ShutdownFile_initial_2eproto();

  void InitAsDefaultInstance();
  static LoginReqMsg* default_instance_;
};
// -------------------------------------------------------------------

class LoginRespMsg : public ::google::protobuf::Message {
 public:
  LoginRespMsg();
  virtual ~LoginRespMsg();

  LoginRespMsg(const LoginRespMsg& from);

  inline LoginRespMsg& operator=(const LoginRespMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRespMsg& default_instance();

  void Swap(LoginRespMsg* other);

  // implements Message ----------------------------------------------

  LoginRespMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRespMsg& from);
  void MergeFrom(const LoginRespMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Cell.RetCode ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::Cell::RetCode ret_code() const;
  inline void set_ret_code(::Cell::RetCode value);

  // optional uint32 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional string session_token = 3;
  inline bool has_session_token() const;
  inline void clear_session_token();
  static const int kSessionTokenFieldNumber = 3;
  inline const ::std::string& session_token() const;
  inline void set_session_token(const ::std::string& value);
  inline void set_session_token(const char* value);
  inline void set_session_token(const char* value, size_t size);
  inline ::std::string* mutable_session_token();
  inline ::std::string* release_session_token();
  inline void set_allocated_session_token(::std::string* session_token);

  // optional .Cell.UserStat user_stat = 4;
  inline bool has_user_stat() const;
  inline void clear_user_stat();
  static const int kUserStatFieldNumber = 4;
  inline ::Cell::UserStat user_stat() const;
  inline void set_user_stat(::Cell::UserStat value);

  // @@protoc_insertion_point(class_scope:Cell.LoginRespMsg)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_session_token();
  inline void clear_has_session_token();
  inline void set_has_user_stat();
  inline void clear_has_user_stat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_code_;
  ::google::protobuf::uint32 uid_;
  ::std::string* session_token_;
  int user_stat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_initial_2eproto();
  friend void protobuf_AssignDesc_initial_2eproto();
  friend void protobuf_ShutdownFile_initial_2eproto();

  void InitAsDefaultInstance();
  static LoginRespMsg* default_instance_;
};
// -------------------------------------------------------------------

class InitReqMsg : public ::google::protobuf::Message {
 public:
  InitReqMsg();
  virtual ~InitReqMsg();

  InitReqMsg(const InitReqMsg& from);

  inline InitReqMsg& operator=(const InitReqMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitReqMsg& default_instance();

  void Swap(InitReqMsg* other);

  // implements Message ----------------------------------------------

  InitReqMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitReqMsg& from);
  void MergeFrom(const InitReqMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string device_id = 1;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  inline const ::std::string& device_id() const;
  inline void set_device_id(const ::std::string& value);
  inline void set_device_id(const char* value);
  inline void set_device_id(const char* value, size_t size);
  inline ::std::string* mutable_device_id();
  inline ::std::string* release_device_id();
  inline void set_allocated_device_id(::std::string* device_id);

  // optional .Cell.DeviceType device_type = 2;
  inline bool has_device_type() const;
  inline void clear_device_type();
  static const int kDeviceTypeFieldNumber = 2;
  inline ::Cell::DeviceType device_type() const;
  inline void set_device_type(::Cell::DeviceType value);

  // optional string app_key = 3;
  inline bool has_app_key() const;
  inline void clear_app_key();
  static const int kAppKeyFieldNumber = 3;
  inline const ::std::string& app_key() const;
  inline void set_app_key(const ::std::string& value);
  inline void set_app_key(const char* value);
  inline void set_app_key(const char* value, size_t size);
  inline ::std::string* mutable_app_key();
  inline ::std::string* release_app_key();
  inline void set_allocated_app_key(::std::string* app_key);

  // optional string app_ver = 4;
  inline bool has_app_ver() const;
  inline void clear_app_ver();
  static const int kAppVerFieldNumber = 4;
  inline const ::std::string& app_ver() const;
  inline void set_app_ver(const ::std::string& value);
  inline void set_app_ver(const char* value);
  inline void set_app_ver(const char* value, size_t size);
  inline ::std::string* mutable_app_ver();
  inline ::std::string* release_app_ver();
  inline void set_allocated_app_ver(::std::string* app_ver);

  // @@protoc_insertion_point(class_scope:Cell.InitReqMsg)
 private:
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_device_type();
  inline void clear_has_device_type();
  inline void set_has_app_key();
  inline void clear_has_app_key();
  inline void set_has_app_ver();
  inline void clear_has_app_ver();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* device_id_;
  ::std::string* app_key_;
  ::std::string* app_ver_;
  int device_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_initial_2eproto();
  friend void protobuf_AssignDesc_initial_2eproto();
  friend void protobuf_ShutdownFile_initial_2eproto();

  void InitAsDefaultInstance();
  static InitReqMsg* default_instance_;
};
// -------------------------------------------------------------------

class InitRespMsg : public ::google::protobuf::Message {
 public:
  InitRespMsg();
  virtual ~InitRespMsg();

  InitRespMsg(const InitRespMsg& from);

  inline InitRespMsg& operator=(const InitRespMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitRespMsg& default_instance();

  void Swap(InitRespMsg* other);

  // implements Message ----------------------------------------------

  InitRespMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitRespMsg& from);
  void MergeFrom(const InitRespMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Cell.RetCode ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::Cell::RetCode ret_code() const;
  inline void set_ret_code(::Cell::RetCode value);

  // optional uint32 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional string session_token = 3;
  inline bool has_session_token() const;
  inline void clear_session_token();
  static const int kSessionTokenFieldNumber = 3;
  inline const ::std::string& session_token() const;
  inline void set_session_token(const ::std::string& value);
  inline void set_session_token(const char* value);
  inline void set_session_token(const char* value, size_t size);
  inline ::std::string* mutable_session_token();
  inline ::std::string* release_session_token();
  inline void set_allocated_session_token(::std::string* session_token);

  // optional .Cell.UserStat user_stat = 4;
  inline bool has_user_stat() const;
  inline void clear_user_stat();
  static const int kUserStatFieldNumber = 4;
  inline ::Cell::UserStat user_stat() const;
  inline void set_user_stat(::Cell::UserStat value);

  // @@protoc_insertion_point(class_scope:Cell.InitRespMsg)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_session_token();
  inline void clear_has_session_token();
  inline void set_has_user_stat();
  inline void clear_has_user_stat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_code_;
  ::google::protobuf::uint32 uid_;
  ::std::string* session_token_;
  int user_stat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_initial_2eproto();
  friend void protobuf_AssignDesc_initial_2eproto();
  friend void protobuf_ShutdownFile_initial_2eproto();

  void InitAsDefaultInstance();
  static InitRespMsg* default_instance_;
};
// -------------------------------------------------------------------

class CheckUserRegReqMsg : public ::google::protobuf::Message {
 public:
  CheckUserRegReqMsg();
  virtual ~CheckUserRegReqMsg();

  CheckUserRegReqMsg(const CheckUserRegReqMsg& from);

  inline CheckUserRegReqMsg& operator=(const CheckUserRegReqMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckUserRegReqMsg& default_instance();

  void Swap(CheckUserRegReqMsg* other);

  // implements Message ----------------------------------------------

  CheckUserRegReqMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckUserRegReqMsg& from);
  void MergeFrom(const CheckUserRegReqMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string usr_info = 1;
  inline bool has_usr_info() const;
  inline void clear_usr_info();
  static const int kUsrInfoFieldNumber = 1;
  inline const ::std::string& usr_info() const;
  inline void set_usr_info(const ::std::string& value);
  inline void set_usr_info(const char* value);
  inline void set_usr_info(const char* value, size_t size);
  inline ::std::string* mutable_usr_info();
  inline ::std::string* release_usr_info();
  inline void set_allocated_usr_info(::std::string* usr_info);

  // @@protoc_insertion_point(class_scope:Cell.CheckUserRegReqMsg)
 private:
  inline void set_has_usr_info();
  inline void clear_has_usr_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* usr_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_initial_2eproto();
  friend void protobuf_AssignDesc_initial_2eproto();
  friend void protobuf_ShutdownFile_initial_2eproto();

  void InitAsDefaultInstance();
  static CheckUserRegReqMsg* default_instance_;
};
// -------------------------------------------------------------------

class CheckUserRegRespMsg : public ::google::protobuf::Message {
 public:
  CheckUserRegRespMsg();
  virtual ~CheckUserRegRespMsg();

  CheckUserRegRespMsg(const CheckUserRegRespMsg& from);

  inline CheckUserRegRespMsg& operator=(const CheckUserRegRespMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckUserRegRespMsg& default_instance();

  void Swap(CheckUserRegRespMsg* other);

  // implements Message ----------------------------------------------

  CheckUserRegRespMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckUserRegRespMsg& from);
  void MergeFrom(const CheckUserRegRespMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Cell.RetCode ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::Cell::RetCode ret_code() const;
  inline void set_ret_code(::Cell::RetCode value);

  // optional .Cell.UserStat user_stat = 2;
  inline bool has_user_stat() const;
  inline void clear_user_stat();
  static const int kUserStatFieldNumber = 2;
  inline ::Cell::UserStat user_stat() const;
  inline void set_user_stat(::Cell::UserStat value);

  // @@protoc_insertion_point(class_scope:Cell.CheckUserRegRespMsg)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_user_stat();
  inline void clear_has_user_stat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_code_;
  int user_stat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_initial_2eproto();
  friend void protobuf_AssignDesc_initial_2eproto();
  friend void protobuf_ShutdownFile_initial_2eproto();

  void InitAsDefaultInstance();
  static CheckUserRegRespMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// RegReqMsg

// optional string session_token = 1;
inline bool RegReqMsg::has_session_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegReqMsg::set_has_session_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegReqMsg::clear_has_session_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegReqMsg::clear_session_token() {
  if (session_token_ != &::google::protobuf::internal::kEmptyString) {
    session_token_->clear();
  }
  clear_has_session_token();
}
inline const ::std::string& RegReqMsg::session_token() const {
  return *session_token_;
}
inline void RegReqMsg::set_session_token(const ::std::string& value) {
  set_has_session_token();
  if (session_token_ == &::google::protobuf::internal::kEmptyString) {
    session_token_ = new ::std::string;
  }
  session_token_->assign(value);
}
inline void RegReqMsg::set_session_token(const char* value) {
  set_has_session_token();
  if (session_token_ == &::google::protobuf::internal::kEmptyString) {
    session_token_ = new ::std::string;
  }
  session_token_->assign(value);
}
inline void RegReqMsg::set_session_token(const char* value, size_t size) {
  set_has_session_token();
  if (session_token_ == &::google::protobuf::internal::kEmptyString) {
    session_token_ = new ::std::string;
  }
  session_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegReqMsg::mutable_session_token() {
  set_has_session_token();
  if (session_token_ == &::google::protobuf::internal::kEmptyString) {
    session_token_ = new ::std::string;
  }
  return session_token_;
}
inline ::std::string* RegReqMsg::release_session_token() {
  clear_has_session_token();
  if (session_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_token_;
    session_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegReqMsg::set_allocated_session_token(::std::string* session_token) {
  if (session_token_ != &::google::protobuf::internal::kEmptyString) {
    delete session_token_;
  }
  if (session_token) {
    set_has_session_token();
    session_token_ = session_token;
  } else {
    clear_has_session_token();
    session_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 uid = 2;
inline bool RegReqMsg::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegReqMsg::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegReqMsg::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegReqMsg::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 RegReqMsg::uid() const {
  return uid_;
}
inline void RegReqMsg::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional string phone = 3;
inline bool RegReqMsg::has_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegReqMsg::set_has_phone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegReqMsg::clear_has_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegReqMsg::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& RegReqMsg::phone() const {
  return *phone_;
}
inline void RegReqMsg::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void RegReqMsg::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void RegReqMsg::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegReqMsg::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* RegReqMsg::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegReqMsg::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string email = 4;
inline bool RegReqMsg::has_email() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegReqMsg::set_has_email() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegReqMsg::clear_has_email() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegReqMsg::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& RegReqMsg::email() const {
  return *email_;
}
inline void RegReqMsg::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void RegReqMsg::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void RegReqMsg::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegReqMsg::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* RegReqMsg::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegReqMsg::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Cell.Gender gender = 5;
inline bool RegReqMsg::has_gender() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RegReqMsg::set_has_gender() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RegReqMsg::clear_has_gender() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RegReqMsg::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::Cell::Gender RegReqMsg::gender() const {
  return static_cast< ::Cell::Gender >(gender_);
}
inline void RegReqMsg::set_gender(::Cell::Gender value) {
  assert(::Cell::Gender_IsValid(value));
  set_has_gender();
  gender_ = value;
}

// optional string birthday = 6;
inline bool RegReqMsg::has_birthday() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RegReqMsg::set_has_birthday() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RegReqMsg::clear_has_birthday() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RegReqMsg::clear_birthday() {
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    birthday_->clear();
  }
  clear_has_birthday();
}
inline const ::std::string& RegReqMsg::birthday() const {
  return *birthday_;
}
inline void RegReqMsg::set_birthday(const ::std::string& value) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(value);
}
inline void RegReqMsg::set_birthday(const char* value) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(value);
}
inline void RegReqMsg::set_birthday(const char* value, size_t size) {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  birthday_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegReqMsg::mutable_birthday() {
  set_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    birthday_ = new ::std::string;
  }
  return birthday_;
}
inline ::std::string* RegReqMsg::release_birthday() {
  clear_has_birthday();
  if (birthday_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = birthday_;
    birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegReqMsg::set_allocated_birthday(::std::string* birthday) {
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    delete birthday_;
  }
  if (birthday) {
    set_has_birthday();
    birthday_ = birthday;
  } else {
    clear_has_birthday();
    birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string avada_url = 7;
inline bool RegReqMsg::has_avada_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RegReqMsg::set_has_avada_url() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RegReqMsg::clear_has_avada_url() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RegReqMsg::clear_avada_url() {
  if (avada_url_ != &::google::protobuf::internal::kEmptyString) {
    avada_url_->clear();
  }
  clear_has_avada_url();
}
inline const ::std::string& RegReqMsg::avada_url() const {
  return *avada_url_;
}
inline void RegReqMsg::set_avada_url(const ::std::string& value) {
  set_has_avada_url();
  if (avada_url_ == &::google::protobuf::internal::kEmptyString) {
    avada_url_ = new ::std::string;
  }
  avada_url_->assign(value);
}
inline void RegReqMsg::set_avada_url(const char* value) {
  set_has_avada_url();
  if (avada_url_ == &::google::protobuf::internal::kEmptyString) {
    avada_url_ = new ::std::string;
  }
  avada_url_->assign(value);
}
inline void RegReqMsg::set_avada_url(const char* value, size_t size) {
  set_has_avada_url();
  if (avada_url_ == &::google::protobuf::internal::kEmptyString) {
    avada_url_ = new ::std::string;
  }
  avada_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegReqMsg::mutable_avada_url() {
  set_has_avada_url();
  if (avada_url_ == &::google::protobuf::internal::kEmptyString) {
    avada_url_ = new ::std::string;
  }
  return avada_url_;
}
inline ::std::string* RegReqMsg::release_avada_url() {
  clear_has_avada_url();
  if (avada_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = avada_url_;
    avada_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegReqMsg::set_allocated_avada_url(::std::string* avada_url) {
  if (avada_url_ != &::google::protobuf::internal::kEmptyString) {
    delete avada_url_;
  }
  if (avada_url) {
    set_has_avada_url();
    avada_url_ = avada_url;
  } else {
    clear_has_avada_url();
    avada_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string usr_name = 8;
inline bool RegReqMsg::has_usr_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RegReqMsg::set_has_usr_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RegReqMsg::clear_has_usr_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RegReqMsg::clear_usr_name() {
  if (usr_name_ != &::google::protobuf::internal::kEmptyString) {
    usr_name_->clear();
  }
  clear_has_usr_name();
}
inline const ::std::string& RegReqMsg::usr_name() const {
  return *usr_name_;
}
inline void RegReqMsg::set_usr_name(const ::std::string& value) {
  set_has_usr_name();
  if (usr_name_ == &::google::protobuf::internal::kEmptyString) {
    usr_name_ = new ::std::string;
  }
  usr_name_->assign(value);
}
inline void RegReqMsg::set_usr_name(const char* value) {
  set_has_usr_name();
  if (usr_name_ == &::google::protobuf::internal::kEmptyString) {
    usr_name_ = new ::std::string;
  }
  usr_name_->assign(value);
}
inline void RegReqMsg::set_usr_name(const char* value, size_t size) {
  set_has_usr_name();
  if (usr_name_ == &::google::protobuf::internal::kEmptyString) {
    usr_name_ = new ::std::string;
  }
  usr_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegReqMsg::mutable_usr_name() {
  set_has_usr_name();
  if (usr_name_ == &::google::protobuf::internal::kEmptyString) {
    usr_name_ = new ::std::string;
  }
  return usr_name_;
}
inline ::std::string* RegReqMsg::release_usr_name() {
  clear_has_usr_name();
  if (usr_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = usr_name_;
    usr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegReqMsg::set_allocated_usr_name(::std::string* usr_name) {
  if (usr_name_ != &::google::protobuf::internal::kEmptyString) {
    delete usr_name_;
  }
  if (usr_name) {
    set_has_usr_name();
    usr_name_ = usr_name;
  } else {
    clear_has_usr_name();
    usr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 9;
inline bool RegReqMsg::has_password() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RegReqMsg::set_has_password() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RegReqMsg::clear_has_password() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RegReqMsg::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& RegReqMsg::password() const {
  return *password_;
}
inline void RegReqMsg::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void RegReqMsg::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void RegReqMsg::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegReqMsg::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* RegReqMsg::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegReqMsg::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Cell.RegSource reg_source = 10;
inline bool RegReqMsg::has_reg_source() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RegReqMsg::set_has_reg_source() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RegReqMsg::clear_has_reg_source() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RegReqMsg::clear_reg_source() {
  reg_source_ = 0;
  clear_has_reg_source();
}
inline ::Cell::RegSource RegReqMsg::reg_source() const {
  return static_cast< ::Cell::RegSource >(reg_source_);
}
inline void RegReqMsg::set_reg_source(::Cell::RegSource value) {
  assert(::Cell::RegSource_IsValid(value));
  set_has_reg_source();
  reg_source_ = value;
}

// optional string avada_size = 11;
inline bool RegReqMsg::has_avada_size() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RegReqMsg::set_has_avada_size() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RegReqMsg::clear_has_avada_size() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RegReqMsg::clear_avada_size() {
  if (avada_size_ != &::google::protobuf::internal::kEmptyString) {
    avada_size_->clear();
  }
  clear_has_avada_size();
}
inline const ::std::string& RegReqMsg::avada_size() const {
  return *avada_size_;
}
inline void RegReqMsg::set_avada_size(const ::std::string& value) {
  set_has_avada_size();
  if (avada_size_ == &::google::protobuf::internal::kEmptyString) {
    avada_size_ = new ::std::string;
  }
  avada_size_->assign(value);
}
inline void RegReqMsg::set_avada_size(const char* value) {
  set_has_avada_size();
  if (avada_size_ == &::google::protobuf::internal::kEmptyString) {
    avada_size_ = new ::std::string;
  }
  avada_size_->assign(value);
}
inline void RegReqMsg::set_avada_size(const char* value, size_t size) {
  set_has_avada_size();
  if (avada_size_ == &::google::protobuf::internal::kEmptyString) {
    avada_size_ = new ::std::string;
  }
  avada_size_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegReqMsg::mutable_avada_size() {
  set_has_avada_size();
  if (avada_size_ == &::google::protobuf::internal::kEmptyString) {
    avada_size_ = new ::std::string;
  }
  return avada_size_;
}
inline ::std::string* RegReqMsg::release_avada_size() {
  clear_has_avada_size();
  if (avada_size_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = avada_size_;
    avada_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegReqMsg::set_allocated_avada_size(::std::string* avada_size) {
  if (avada_size_ != &::google::protobuf::internal::kEmptyString) {
    delete avada_size_;
  }
  if (avada_size) {
    set_has_avada_size();
    avada_size_ = avada_size;
  } else {
    clear_has_avada_size();
    avada_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Cell.BloodType blood_type = 12;
inline bool RegReqMsg::has_blood_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RegReqMsg::set_has_blood_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RegReqMsg::clear_has_blood_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RegReqMsg::clear_blood_type() {
  blood_type_ = 1;
  clear_has_blood_type();
}
inline ::Cell::BloodType RegReqMsg::blood_type() const {
  return static_cast< ::Cell::BloodType >(blood_type_);
}
inline void RegReqMsg::set_blood_type(::Cell::BloodType value) {
  assert(::Cell::BloodType_IsValid(value));
  set_has_blood_type();
  blood_type_ = value;
}

// optional .Cell.ConstellationType constellation = 13;
inline bool RegReqMsg::has_constellation() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RegReqMsg::set_has_constellation() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RegReqMsg::clear_has_constellation() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RegReqMsg::clear_constellation() {
  constellation_ = 1;
  clear_has_constellation();
}
inline ::Cell::ConstellationType RegReqMsg::constellation() const {
  return static_cast< ::Cell::ConstellationType >(constellation_);
}
inline void RegReqMsg::set_constellation(::Cell::ConstellationType value) {
  assert(::Cell::ConstellationType_IsValid(value));
  set_has_constellation();
  constellation_ = value;
}

// optional .Cell.ZodiacType zodiac = 14;
inline bool RegReqMsg::has_zodiac() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RegReqMsg::set_has_zodiac() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RegReqMsg::clear_has_zodiac() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RegReqMsg::clear_zodiac() {
  zodiac_ = 1;
  clear_has_zodiac();
}
inline ::Cell::ZodiacType RegReqMsg::zodiac() const {
  return static_cast< ::Cell::ZodiacType >(zodiac_);
}
inline void RegReqMsg::set_zodiac(::Cell::ZodiacType value) {
  assert(::Cell::ZodiacType_IsValid(value));
  set_has_zodiac();
  zodiac_ = value;
}

// optional .Cell.Geo geo = 15;
inline bool RegReqMsg::has_geo() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RegReqMsg::set_has_geo() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RegReqMsg::clear_has_geo() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RegReqMsg::clear_geo() {
  if (geo_ != NULL) geo_->::Cell::Geo::Clear();
  clear_has_geo();
}
inline const ::Cell::Geo& RegReqMsg::geo() const {
  return geo_ != NULL ? *geo_ : *default_instance_->geo_;
}
inline ::Cell::Geo* RegReqMsg::mutable_geo() {
  set_has_geo();
  if (geo_ == NULL) geo_ = new ::Cell::Geo;
  return geo_;
}
inline ::Cell::Geo* RegReqMsg::release_geo() {
  clear_has_geo();
  ::Cell::Geo* temp = geo_;
  geo_ = NULL;
  return temp;
}
inline void RegReqMsg::set_allocated_geo(::Cell::Geo* geo) {
  delete geo_;
  geo_ = geo;
  if (geo) {
    set_has_geo();
  } else {
    clear_has_geo();
  }
}

// -------------------------------------------------------------------

// RegRespMsg

// required .Cell.RetCode ret_code = 1;
inline bool RegRespMsg::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegRespMsg::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegRespMsg::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegRespMsg::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::Cell::RetCode RegRespMsg::ret_code() const {
  return static_cast< ::Cell::RetCode >(ret_code_);
}
inline void RegRespMsg::set_ret_code(::Cell::RetCode value) {
  assert(::Cell::RetCode_IsValid(value));
  set_has_ret_code();
  ret_code_ = value;
}

// optional .Cell.UserStat user_stat = 2;
inline bool RegRespMsg::has_user_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegRespMsg::set_has_user_stat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegRespMsg::clear_has_user_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegRespMsg::clear_user_stat() {
  user_stat_ = 0;
  clear_has_user_stat();
}
inline ::Cell::UserStat RegRespMsg::user_stat() const {
  return static_cast< ::Cell::UserStat >(user_stat_);
}
inline void RegRespMsg::set_user_stat(::Cell::UserStat value) {
  assert(::Cell::UserStat_IsValid(value));
  set_has_user_stat();
  user_stat_ = value;
}

// -------------------------------------------------------------------

// LoginReqMsg

// optional string usr_info = 1;
inline bool LoginReqMsg::has_usr_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginReqMsg::set_has_usr_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginReqMsg::clear_has_usr_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginReqMsg::clear_usr_info() {
  if (usr_info_ != &::google::protobuf::internal::kEmptyString) {
    usr_info_->clear();
  }
  clear_has_usr_info();
}
inline const ::std::string& LoginReqMsg::usr_info() const {
  return *usr_info_;
}
inline void LoginReqMsg::set_usr_info(const ::std::string& value) {
  set_has_usr_info();
  if (usr_info_ == &::google::protobuf::internal::kEmptyString) {
    usr_info_ = new ::std::string;
  }
  usr_info_->assign(value);
}
inline void LoginReqMsg::set_usr_info(const char* value) {
  set_has_usr_info();
  if (usr_info_ == &::google::protobuf::internal::kEmptyString) {
    usr_info_ = new ::std::string;
  }
  usr_info_->assign(value);
}
inline void LoginReqMsg::set_usr_info(const char* value, size_t size) {
  set_has_usr_info();
  if (usr_info_ == &::google::protobuf::internal::kEmptyString) {
    usr_info_ = new ::std::string;
  }
  usr_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginReqMsg::mutable_usr_info() {
  set_has_usr_info();
  if (usr_info_ == &::google::protobuf::internal::kEmptyString) {
    usr_info_ = new ::std::string;
  }
  return usr_info_;
}
inline ::std::string* LoginReqMsg::release_usr_info() {
  clear_has_usr_info();
  if (usr_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = usr_info_;
    usr_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginReqMsg::set_allocated_usr_info(::std::string* usr_info) {
  if (usr_info_ != &::google::protobuf::internal::kEmptyString) {
    delete usr_info_;
  }
  if (usr_info) {
    set_has_usr_info();
    usr_info_ = usr_info;
  } else {
    clear_has_usr_info();
    usr_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 2;
inline bool LoginReqMsg::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginReqMsg::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginReqMsg::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginReqMsg::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& LoginReqMsg::password() const {
  return *password_;
}
inline void LoginReqMsg::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void LoginReqMsg::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void LoginReqMsg::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginReqMsg::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* LoginReqMsg::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginReqMsg::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Cell.Geo geo = 3;
inline bool LoginReqMsg::has_geo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginReqMsg::set_has_geo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginReqMsg::clear_has_geo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginReqMsg::clear_geo() {
  if (geo_ != NULL) geo_->::Cell::Geo::Clear();
  clear_has_geo();
}
inline const ::Cell::Geo& LoginReqMsg::geo() const {
  return geo_ != NULL ? *geo_ : *default_instance_->geo_;
}
inline ::Cell::Geo* LoginReqMsg::mutable_geo() {
  set_has_geo();
  if (geo_ == NULL) geo_ = new ::Cell::Geo;
  return geo_;
}
inline ::Cell::Geo* LoginReqMsg::release_geo() {
  clear_has_geo();
  ::Cell::Geo* temp = geo_;
  geo_ = NULL;
  return temp;
}
inline void LoginReqMsg::set_allocated_geo(::Cell::Geo* geo) {
  delete geo_;
  geo_ = geo;
  if (geo) {
    set_has_geo();
  } else {
    clear_has_geo();
  }
}

// -------------------------------------------------------------------

// LoginRespMsg

// required .Cell.RetCode ret_code = 1;
inline bool LoginRespMsg::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRespMsg::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRespMsg::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRespMsg::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::Cell::RetCode LoginRespMsg::ret_code() const {
  return static_cast< ::Cell::RetCode >(ret_code_);
}
inline void LoginRespMsg::set_ret_code(::Cell::RetCode value) {
  assert(::Cell::RetCode_IsValid(value));
  set_has_ret_code();
  ret_code_ = value;
}

// optional uint32 uid = 2;
inline bool LoginRespMsg::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRespMsg::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRespMsg::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRespMsg::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 LoginRespMsg::uid() const {
  return uid_;
}
inline void LoginRespMsg::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional string session_token = 3;
inline bool LoginRespMsg::has_session_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginRespMsg::set_has_session_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginRespMsg::clear_has_session_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginRespMsg::clear_session_token() {
  if (session_token_ != &::google::protobuf::internal::kEmptyString) {
    session_token_->clear();
  }
  clear_has_session_token();
}
inline const ::std::string& LoginRespMsg::session_token() const {
  return *session_token_;
}
inline void LoginRespMsg::set_session_token(const ::std::string& value) {
  set_has_session_token();
  if (session_token_ == &::google::protobuf::internal::kEmptyString) {
    session_token_ = new ::std::string;
  }
  session_token_->assign(value);
}
inline void LoginRespMsg::set_session_token(const char* value) {
  set_has_session_token();
  if (session_token_ == &::google::protobuf::internal::kEmptyString) {
    session_token_ = new ::std::string;
  }
  session_token_->assign(value);
}
inline void LoginRespMsg::set_session_token(const char* value, size_t size) {
  set_has_session_token();
  if (session_token_ == &::google::protobuf::internal::kEmptyString) {
    session_token_ = new ::std::string;
  }
  session_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRespMsg::mutable_session_token() {
  set_has_session_token();
  if (session_token_ == &::google::protobuf::internal::kEmptyString) {
    session_token_ = new ::std::string;
  }
  return session_token_;
}
inline ::std::string* LoginRespMsg::release_session_token() {
  clear_has_session_token();
  if (session_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_token_;
    session_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRespMsg::set_allocated_session_token(::std::string* session_token) {
  if (session_token_ != &::google::protobuf::internal::kEmptyString) {
    delete session_token_;
  }
  if (session_token) {
    set_has_session_token();
    session_token_ = session_token;
  } else {
    clear_has_session_token();
    session_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Cell.UserStat user_stat = 4;
inline bool LoginRespMsg::has_user_stat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginRespMsg::set_has_user_stat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginRespMsg::clear_has_user_stat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginRespMsg::clear_user_stat() {
  user_stat_ = 0;
  clear_has_user_stat();
}
inline ::Cell::UserStat LoginRespMsg::user_stat() const {
  return static_cast< ::Cell::UserStat >(user_stat_);
}
inline void LoginRespMsg::set_user_stat(::Cell::UserStat value) {
  assert(::Cell::UserStat_IsValid(value));
  set_has_user_stat();
  user_stat_ = value;
}

// -------------------------------------------------------------------

// InitReqMsg

// optional string device_id = 1;
inline bool InitReqMsg::has_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InitReqMsg::set_has_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InitReqMsg::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InitReqMsg::clear_device_id() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    device_id_->clear();
  }
  clear_has_device_id();
}
inline const ::std::string& InitReqMsg::device_id() const {
  return *device_id_;
}
inline void InitReqMsg::set_device_id(const ::std::string& value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void InitReqMsg::set_device_id(const char* value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void InitReqMsg::set_device_id(const char* value, size_t size) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InitReqMsg::mutable_device_id() {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  return device_id_;
}
inline ::std::string* InitReqMsg::release_device_id() {
  clear_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_id_;
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InitReqMsg::set_allocated_device_id(::std::string* device_id) {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (device_id) {
    set_has_device_id();
    device_id_ = device_id;
  } else {
    clear_has_device_id();
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Cell.DeviceType device_type = 2;
inline bool InitReqMsg::has_device_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InitReqMsg::set_has_device_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InitReqMsg::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InitReqMsg::clear_device_type() {
  device_type_ = 0;
  clear_has_device_type();
}
inline ::Cell::DeviceType InitReqMsg::device_type() const {
  return static_cast< ::Cell::DeviceType >(device_type_);
}
inline void InitReqMsg::set_device_type(::Cell::DeviceType value) {
  assert(::Cell::DeviceType_IsValid(value));
  set_has_device_type();
  device_type_ = value;
}

// optional string app_key = 3;
inline bool InitReqMsg::has_app_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InitReqMsg::set_has_app_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InitReqMsg::clear_has_app_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InitReqMsg::clear_app_key() {
  if (app_key_ != &::google::protobuf::internal::kEmptyString) {
    app_key_->clear();
  }
  clear_has_app_key();
}
inline const ::std::string& InitReqMsg::app_key() const {
  return *app_key_;
}
inline void InitReqMsg::set_app_key(const ::std::string& value) {
  set_has_app_key();
  if (app_key_ == &::google::protobuf::internal::kEmptyString) {
    app_key_ = new ::std::string;
  }
  app_key_->assign(value);
}
inline void InitReqMsg::set_app_key(const char* value) {
  set_has_app_key();
  if (app_key_ == &::google::protobuf::internal::kEmptyString) {
    app_key_ = new ::std::string;
  }
  app_key_->assign(value);
}
inline void InitReqMsg::set_app_key(const char* value, size_t size) {
  set_has_app_key();
  if (app_key_ == &::google::protobuf::internal::kEmptyString) {
    app_key_ = new ::std::string;
  }
  app_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InitReqMsg::mutable_app_key() {
  set_has_app_key();
  if (app_key_ == &::google::protobuf::internal::kEmptyString) {
    app_key_ = new ::std::string;
  }
  return app_key_;
}
inline ::std::string* InitReqMsg::release_app_key() {
  clear_has_app_key();
  if (app_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_key_;
    app_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InitReqMsg::set_allocated_app_key(::std::string* app_key) {
  if (app_key_ != &::google::protobuf::internal::kEmptyString) {
    delete app_key_;
  }
  if (app_key) {
    set_has_app_key();
    app_key_ = app_key;
  } else {
    clear_has_app_key();
    app_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string app_ver = 4;
inline bool InitReqMsg::has_app_ver() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InitReqMsg::set_has_app_ver() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InitReqMsg::clear_has_app_ver() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InitReqMsg::clear_app_ver() {
  if (app_ver_ != &::google::protobuf::internal::kEmptyString) {
    app_ver_->clear();
  }
  clear_has_app_ver();
}
inline const ::std::string& InitReqMsg::app_ver() const {
  return *app_ver_;
}
inline void InitReqMsg::set_app_ver(const ::std::string& value) {
  set_has_app_ver();
  if (app_ver_ == &::google::protobuf::internal::kEmptyString) {
    app_ver_ = new ::std::string;
  }
  app_ver_->assign(value);
}
inline void InitReqMsg::set_app_ver(const char* value) {
  set_has_app_ver();
  if (app_ver_ == &::google::protobuf::internal::kEmptyString) {
    app_ver_ = new ::std::string;
  }
  app_ver_->assign(value);
}
inline void InitReqMsg::set_app_ver(const char* value, size_t size) {
  set_has_app_ver();
  if (app_ver_ == &::google::protobuf::internal::kEmptyString) {
    app_ver_ = new ::std::string;
  }
  app_ver_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InitReqMsg::mutable_app_ver() {
  set_has_app_ver();
  if (app_ver_ == &::google::protobuf::internal::kEmptyString) {
    app_ver_ = new ::std::string;
  }
  return app_ver_;
}
inline ::std::string* InitReqMsg::release_app_ver() {
  clear_has_app_ver();
  if (app_ver_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_ver_;
    app_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InitReqMsg::set_allocated_app_ver(::std::string* app_ver) {
  if (app_ver_ != &::google::protobuf::internal::kEmptyString) {
    delete app_ver_;
  }
  if (app_ver) {
    set_has_app_ver();
    app_ver_ = app_ver;
  } else {
    clear_has_app_ver();
    app_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// InitRespMsg

// required .Cell.RetCode ret_code = 1;
inline bool InitRespMsg::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InitRespMsg::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InitRespMsg::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InitRespMsg::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::Cell::RetCode InitRespMsg::ret_code() const {
  return static_cast< ::Cell::RetCode >(ret_code_);
}
inline void InitRespMsg::set_ret_code(::Cell::RetCode value) {
  assert(::Cell::RetCode_IsValid(value));
  set_has_ret_code();
  ret_code_ = value;
}

// optional uint32 uid = 2;
inline bool InitRespMsg::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InitRespMsg::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InitRespMsg::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InitRespMsg::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 InitRespMsg::uid() const {
  return uid_;
}
inline void InitRespMsg::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional string session_token = 3;
inline bool InitRespMsg::has_session_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InitRespMsg::set_has_session_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InitRespMsg::clear_has_session_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InitRespMsg::clear_session_token() {
  if (session_token_ != &::google::protobuf::internal::kEmptyString) {
    session_token_->clear();
  }
  clear_has_session_token();
}
inline const ::std::string& InitRespMsg::session_token() const {
  return *session_token_;
}
inline void InitRespMsg::set_session_token(const ::std::string& value) {
  set_has_session_token();
  if (session_token_ == &::google::protobuf::internal::kEmptyString) {
    session_token_ = new ::std::string;
  }
  session_token_->assign(value);
}
inline void InitRespMsg::set_session_token(const char* value) {
  set_has_session_token();
  if (session_token_ == &::google::protobuf::internal::kEmptyString) {
    session_token_ = new ::std::string;
  }
  session_token_->assign(value);
}
inline void InitRespMsg::set_session_token(const char* value, size_t size) {
  set_has_session_token();
  if (session_token_ == &::google::protobuf::internal::kEmptyString) {
    session_token_ = new ::std::string;
  }
  session_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InitRespMsg::mutable_session_token() {
  set_has_session_token();
  if (session_token_ == &::google::protobuf::internal::kEmptyString) {
    session_token_ = new ::std::string;
  }
  return session_token_;
}
inline ::std::string* InitRespMsg::release_session_token() {
  clear_has_session_token();
  if (session_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_token_;
    session_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InitRespMsg::set_allocated_session_token(::std::string* session_token) {
  if (session_token_ != &::google::protobuf::internal::kEmptyString) {
    delete session_token_;
  }
  if (session_token) {
    set_has_session_token();
    session_token_ = session_token;
  } else {
    clear_has_session_token();
    session_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Cell.UserStat user_stat = 4;
inline bool InitRespMsg::has_user_stat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InitRespMsg::set_has_user_stat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InitRespMsg::clear_has_user_stat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InitRespMsg::clear_user_stat() {
  user_stat_ = 0;
  clear_has_user_stat();
}
inline ::Cell::UserStat InitRespMsg::user_stat() const {
  return static_cast< ::Cell::UserStat >(user_stat_);
}
inline void InitRespMsg::set_user_stat(::Cell::UserStat value) {
  assert(::Cell::UserStat_IsValid(value));
  set_has_user_stat();
  user_stat_ = value;
}

// -------------------------------------------------------------------

// CheckUserRegReqMsg

// optional string usr_info = 1;
inline bool CheckUserRegReqMsg::has_usr_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckUserRegReqMsg::set_has_usr_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckUserRegReqMsg::clear_has_usr_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckUserRegReqMsg::clear_usr_info() {
  if (usr_info_ != &::google::protobuf::internal::kEmptyString) {
    usr_info_->clear();
  }
  clear_has_usr_info();
}
inline const ::std::string& CheckUserRegReqMsg::usr_info() const {
  return *usr_info_;
}
inline void CheckUserRegReqMsg::set_usr_info(const ::std::string& value) {
  set_has_usr_info();
  if (usr_info_ == &::google::protobuf::internal::kEmptyString) {
    usr_info_ = new ::std::string;
  }
  usr_info_->assign(value);
}
inline void CheckUserRegReqMsg::set_usr_info(const char* value) {
  set_has_usr_info();
  if (usr_info_ == &::google::protobuf::internal::kEmptyString) {
    usr_info_ = new ::std::string;
  }
  usr_info_->assign(value);
}
inline void CheckUserRegReqMsg::set_usr_info(const char* value, size_t size) {
  set_has_usr_info();
  if (usr_info_ == &::google::protobuf::internal::kEmptyString) {
    usr_info_ = new ::std::string;
  }
  usr_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CheckUserRegReqMsg::mutable_usr_info() {
  set_has_usr_info();
  if (usr_info_ == &::google::protobuf::internal::kEmptyString) {
    usr_info_ = new ::std::string;
  }
  return usr_info_;
}
inline ::std::string* CheckUserRegReqMsg::release_usr_info() {
  clear_has_usr_info();
  if (usr_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = usr_info_;
    usr_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CheckUserRegReqMsg::set_allocated_usr_info(::std::string* usr_info) {
  if (usr_info_ != &::google::protobuf::internal::kEmptyString) {
    delete usr_info_;
  }
  if (usr_info) {
    set_has_usr_info();
    usr_info_ = usr_info;
  } else {
    clear_has_usr_info();
    usr_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CheckUserRegRespMsg

// required .Cell.RetCode ret_code = 1;
inline bool CheckUserRegRespMsg::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckUserRegRespMsg::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckUserRegRespMsg::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckUserRegRespMsg::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::Cell::RetCode CheckUserRegRespMsg::ret_code() const {
  return static_cast< ::Cell::RetCode >(ret_code_);
}
inline void CheckUserRegRespMsg::set_ret_code(::Cell::RetCode value) {
  assert(::Cell::RetCode_IsValid(value));
  set_has_ret_code();
  ret_code_ = value;
}

// optional .Cell.UserStat user_stat = 2;
inline bool CheckUserRegRespMsg::has_user_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckUserRegRespMsg::set_has_user_stat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckUserRegRespMsg::clear_has_user_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckUserRegRespMsg::clear_user_stat() {
  user_stat_ = 0;
  clear_has_user_stat();
}
inline ::Cell::UserStat CheckUserRegRespMsg::user_stat() const {
  return static_cast< ::Cell::UserStat >(user_stat_);
}
inline void CheckUserRegRespMsg::set_user_stat(::Cell::UserStat value) {
  assert(::Cell::UserStat_IsValid(value));
  set_has_user_stat();
  user_stat_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cell

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_initial_2eproto__INCLUDED
