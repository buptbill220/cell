// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ugc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ugc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cell {

namespace {

const ::google::protobuf::Descriptor* UploadUGCReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadUGCReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadUGCRespMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadUGCRespMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PullUGCReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PullUGCReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PullUGCRespMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PullUGCRespMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUGCReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUGCReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUGCRespMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUGCRespMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostUGCReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostUGCReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostUGCRespMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostUGCRespMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUGCListReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUGCListReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUGCListRespMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUGCListRespMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddCommentReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddCommentReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddCommentRespMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddCommentRespMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCommentReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCommentReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCommentRespMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCommentRespMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCommentRespMsg_CommentDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCommentRespMsg_CommentDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddCollectionReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddCollectionReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddCollectionRespMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddCollectionRespMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayCardReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayCardReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayCardRespMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayCardRespMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ugc_2eproto() {
  protobuf_AddDesc_ugc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ugc.proto");
  GOOGLE_CHECK(file != NULL);
  UploadUGCReqMsg_descriptor_ = file->message_type(0);
  static const int UploadUGCReqMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadUGCReqMsg, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadUGCReqMsg, session_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadUGCReqMsg, ugc_),
  };
  UploadUGCReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadUGCReqMsg_descriptor_,
      UploadUGCReqMsg::default_instance_,
      UploadUGCReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadUGCReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadUGCReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadUGCReqMsg));
  UploadUGCRespMsg_descriptor_ = file->message_type(1);
  static const int UploadUGCRespMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadUGCRespMsg, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadUGCRespMsg, ugc_id_),
  };
  UploadUGCRespMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadUGCRespMsg_descriptor_,
      UploadUGCRespMsg::default_instance_,
      UploadUGCRespMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadUGCRespMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadUGCRespMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadUGCRespMsg));
  PullUGCReqMsg_descriptor_ = file->message_type(2);
  static const int PullUGCReqMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullUGCReqMsg, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullUGCReqMsg, session_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullUGCReqMsg, geo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullUGCReqMsg, need_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullUGCReqMsg, last_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullUGCReqMsg, pull_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullUGCReqMsg, forbid_uid_),
  };
  PullUGCReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PullUGCReqMsg_descriptor_,
      PullUGCReqMsg::default_instance_,
      PullUGCReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullUGCReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullUGCReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PullUGCReqMsg));
  PullUGCRespMsg_descriptor_ = file->message_type(3);
  static const int PullUGCRespMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullUGCRespMsg, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullUGCRespMsg, ugc_id_list_),
  };
  PullUGCRespMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PullUGCRespMsg_descriptor_,
      PullUGCRespMsg::default_instance_,
      PullUGCRespMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullUGCRespMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullUGCRespMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PullUGCRespMsg));
  GetUGCReqMsg_descriptor_ = file->message_type(4);
  static const int GetUGCReqMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCReqMsg, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCReqMsg, session_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCReqMsg, ugc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCReqMsg, org_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCReqMsg, geo_),
  };
  GetUGCReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUGCReqMsg_descriptor_,
      GetUGCReqMsg::default_instance_,
      GetUGCReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUGCReqMsg));
  GetUGCRespMsg_descriptor_ = file->message_type(5);
  static const int GetUGCRespMsg_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCRespMsg, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCRespMsg, ugc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCRespMsg, post_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCRespMsg, pass_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCRespMsg, post_dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCRespMsg, usr_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCRespMsg, avada_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCRespMsg, dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCRespMsg, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCRespMsg, alive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCRespMsg, card_type_),
  };
  GetUGCRespMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUGCRespMsg_descriptor_,
      GetUGCRespMsg::default_instance_,
      GetUGCRespMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCRespMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCRespMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUGCRespMsg));
  PostUGCReqMsg_descriptor_ = file->message_type(6);
  static const int PostUGCReqMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostUGCReqMsg, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostUGCReqMsg, session_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostUGCReqMsg, ugc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostUGCReqMsg, msid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostUGCReqMsg, org_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostUGCReqMsg, post_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostUGCReqMsg, geo_),
  };
  PostUGCReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostUGCReqMsg_descriptor_,
      PostUGCReqMsg::default_instance_,
      PostUGCReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostUGCReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostUGCReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostUGCReqMsg));
  PostUGCRespMsg_descriptor_ = file->message_type(7);
  static const int PostUGCRespMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostUGCRespMsg, ret_code_),
  };
  PostUGCRespMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostUGCRespMsg_descriptor_,
      PostUGCRespMsg::default_instance_,
      PostUGCRespMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostUGCRespMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostUGCRespMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostUGCRespMsg));
  GetUGCListReqMsg_descriptor_ = file->message_type(8);
  static const int GetUGCListReqMsg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCListReqMsg, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCListReqMsg, session_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCListReqMsg, ugc_list_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCListReqMsg, need_ugc_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCListReqMsg, last_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCListReqMsg, org_uid_),
  };
  GetUGCListReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUGCListReqMsg_descriptor_,
      GetUGCListReqMsg::default_instance_,
      GetUGCListReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCListReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCListReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUGCListReqMsg));
  GetUGCListRespMsg_descriptor_ = file->message_type(9);
  static const int GetUGCListRespMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCListRespMsg, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCListRespMsg, ugc_id_list_),
  };
  GetUGCListRespMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUGCListRespMsg_descriptor_,
      GetUGCListRespMsg::default_instance_,
      GetUGCListRespMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCListRespMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUGCListRespMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUGCListRespMsg));
  AddCommentReqMsg_descriptor_ = file->message_type(10);
  static const int AddCommentReqMsg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCommentReqMsg, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCommentReqMsg, session_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCommentReqMsg, ugc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCommentReqMsg, msid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCommentReqMsg, org_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCommentReqMsg, comment_),
  };
  AddCommentReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddCommentReqMsg_descriptor_,
      AddCommentReqMsg::default_instance_,
      AddCommentReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCommentReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCommentReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddCommentReqMsg));
  AddCommentRespMsg_descriptor_ = file->message_type(11);
  static const int AddCommentRespMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCommentRespMsg, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCommentRespMsg, mcid_),
  };
  AddCommentRespMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddCommentRespMsg_descriptor_,
      AddCommentRespMsg::default_instance_,
      AddCommentRespMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCommentRespMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCommentRespMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddCommentRespMsg));
  GetCommentReqMsg_descriptor_ = file->message_type(12);
  static const int GetCommentReqMsg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCommentReqMsg, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCommentReqMsg, session_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCommentReqMsg, comment_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCommentReqMsg, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCommentReqMsg, last_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCommentReqMsg, need_num_),
  };
  GetCommentReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCommentReqMsg_descriptor_,
      GetCommentReqMsg::default_instance_,
      GetCommentReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCommentReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCommentReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCommentReqMsg));
  GetCommentRespMsg_descriptor_ = file->message_type(13);
  static const int GetCommentRespMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCommentRespMsg, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCommentRespMsg, comments_),
  };
  GetCommentRespMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCommentRespMsg_descriptor_,
      GetCommentRespMsg::default_instance_,
      GetCommentRespMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCommentRespMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCommentRespMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCommentRespMsg));
  GetCommentRespMsg_CommentDetail_descriptor_ = GetCommentRespMsg_descriptor_->nested_type(0);
  static const int GetCommentRespMsg_CommentDetail_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCommentRespMsg_CommentDetail, mcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCommentRespMsg_CommentDetail, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCommentRespMsg_CommentDetail, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCommentRespMsg_CommentDetail, avada_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCommentRespMsg_CommentDetail, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCommentRespMsg_CommentDetail, create_time_),
  };
  GetCommentRespMsg_CommentDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCommentRespMsg_CommentDetail_descriptor_,
      GetCommentRespMsg_CommentDetail::default_instance_,
      GetCommentRespMsg_CommentDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCommentRespMsg_CommentDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCommentRespMsg_CommentDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCommentRespMsg_CommentDetail));
  AddCollectionReqMsg_descriptor_ = file->message_type(14);
  static const int AddCollectionReqMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCollectionReqMsg, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCollectionReqMsg, session_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCollectionReqMsg, confirmtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCollectionReqMsg, ugc_id_list_),
  };
  AddCollectionReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddCollectionReqMsg_descriptor_,
      AddCollectionReqMsg::default_instance_,
      AddCollectionReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCollectionReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCollectionReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddCollectionReqMsg));
  AddCollectionRespMsg_descriptor_ = file->message_type(15);
  static const int AddCollectionRespMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCollectionRespMsg, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCollectionRespMsg, clt_id_),
  };
  AddCollectionRespMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddCollectionRespMsg_descriptor_,
      AddCollectionRespMsg::default_instance_,
      AddCollectionRespMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCollectionRespMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCollectionRespMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddCollectionRespMsg));
  PlayCardReqMsg_descriptor_ = file->message_type(16);
  static const int PlayCardReqMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayCardReqMsg, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayCardReqMsg, session_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayCardReqMsg, geo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayCardReqMsg, coin_),
  };
  PlayCardReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayCardReqMsg_descriptor_,
      PlayCardReqMsg::default_instance_,
      PlayCardReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayCardReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayCardReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayCardReqMsg));
  PlayCardRespMsg_descriptor_ = file->message_type(17);
  static const int PlayCardRespMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayCardRespMsg, ret_code_),
  };
  PlayCardRespMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayCardRespMsg_descriptor_,
      PlayCardRespMsg::default_instance_,
      PlayCardRespMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayCardRespMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayCardRespMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayCardRespMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ugc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadUGCReqMsg_descriptor_, &UploadUGCReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadUGCRespMsg_descriptor_, &UploadUGCRespMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PullUGCReqMsg_descriptor_, &PullUGCReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PullUGCRespMsg_descriptor_, &PullUGCRespMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUGCReqMsg_descriptor_, &GetUGCReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUGCRespMsg_descriptor_, &GetUGCRespMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostUGCReqMsg_descriptor_, &PostUGCReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostUGCRespMsg_descriptor_, &PostUGCRespMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUGCListReqMsg_descriptor_, &GetUGCListReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUGCListRespMsg_descriptor_, &GetUGCListRespMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddCommentReqMsg_descriptor_, &AddCommentReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddCommentRespMsg_descriptor_, &AddCommentRespMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCommentReqMsg_descriptor_, &GetCommentReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCommentRespMsg_descriptor_, &GetCommentRespMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCommentRespMsg_CommentDetail_descriptor_, &GetCommentRespMsg_CommentDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddCollectionReqMsg_descriptor_, &AddCollectionReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddCollectionRespMsg_descriptor_, &AddCollectionRespMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayCardReqMsg_descriptor_, &PlayCardReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayCardRespMsg_descriptor_, &PlayCardRespMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ugc_2eproto() {
  delete UploadUGCReqMsg::default_instance_;
  delete UploadUGCReqMsg_reflection_;
  delete UploadUGCRespMsg::default_instance_;
  delete UploadUGCRespMsg_reflection_;
  delete PullUGCReqMsg::default_instance_;
  delete PullUGCReqMsg_reflection_;
  delete PullUGCRespMsg::default_instance_;
  delete PullUGCRespMsg_reflection_;
  delete GetUGCReqMsg::default_instance_;
  delete GetUGCReqMsg_reflection_;
  delete GetUGCRespMsg::default_instance_;
  delete GetUGCRespMsg_reflection_;
  delete PostUGCReqMsg::default_instance_;
  delete PostUGCReqMsg_reflection_;
  delete PostUGCRespMsg::default_instance_;
  delete PostUGCRespMsg_reflection_;
  delete GetUGCListReqMsg::default_instance_;
  delete GetUGCListReqMsg_reflection_;
  delete GetUGCListRespMsg::default_instance_;
  delete GetUGCListRespMsg_reflection_;
  delete AddCommentReqMsg::default_instance_;
  delete AddCommentReqMsg_reflection_;
  delete AddCommentRespMsg::default_instance_;
  delete AddCommentRespMsg_reflection_;
  delete GetCommentReqMsg::default_instance_;
  delete GetCommentReqMsg_reflection_;
  delete GetCommentRespMsg::default_instance_;
  delete GetCommentRespMsg_reflection_;
  delete GetCommentRespMsg_CommentDetail::default_instance_;
  delete GetCommentRespMsg_CommentDetail_reflection_;
  delete AddCollectionReqMsg::default_instance_;
  delete AddCollectionReqMsg_reflection_;
  delete AddCollectionRespMsg::default_instance_;
  delete AddCollectionRespMsg_reflection_;
  delete PlayCardReqMsg::default_instance_;
  delete PlayCardReqMsg_reflection_;
  delete PlayCardRespMsg::default_instance_;
  delete PlayCardRespMsg_reflection_;
}

void protobuf_AddDesc_ugc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cell::protobuf_AddDesc_common_5fdata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tugc.proto\022\004Cell\032\021common_data.proto\"M\n\017"
    "UploadUGCReqMsg\022\013\n\003uid\030\001 \002(\r\022\025\n\rsession_"
    "token\030\002 \002(\t\022\026\n\003ugc\030\003 \001(\0132\t.Cell.UGC\"C\n\020U"
    "ploadUGCRespMsg\022\037\n\010ret_code\030\001 \002(\0162\r.Cell"
    ".RetCode\022\016\n\006ugc_id\030\002 \001(\004\"\256\001\n\rPullUGCReqM"
    "sg\022\013\n\003uid\030\001 \002(\r\022\025\n\rsession_token\030\002 \002(\t\022\026"
    "\n\003geo\030\003 \001(\0132\t.Cell.Geo\022\020\n\010need_num\030\004 \001(\r"
    "\022\017\n\007last_id\030\005 \001(\004\022*\n\tpull_type\030\006 \001(\0162\016.C"
    "ell.PullType:\007PT_PULL\022\022\n\nforbid_uid\030\007 \003("
    "\r\"W\n\016PullUGCRespMsg\022\037\n\010ret_code\030\001 \002(\0162\r."
    "Cell.RetCode\022$\n\013ugc_id_list\030\002 \003(\0132\017.Cell"
    ".UGCIdList\"k\n\014GetUGCReqMsg\022\013\n\003uid\030\001 \002(\r\022"
    "\025\n\rsession_token\030\002 \002(\t\022\016\n\006ugc_id\030\003 \003(\004\022\017"
    "\n\007org_uid\030\004 \003(\r\022\026\n\003geo\030\005 \001(\0132\t.Cell.Geo\""
    "\202\002\n\rGetUGCRespMsg\022\037\n\010ret_code\030\001 \002(\0162\r.Ce"
    "ll.RetCode\022\026\n\003ugc\030\002 \003(\0132\t.Cell.UGC\022\020\n\010po"
    "st_num\030\003 \003(\r\022\020\n\010pass_num\030\004 \003(\r\022\021\n\tpost_d"
    "ist\030\005 \003(\r\022\020\n\010usr_name\030\006 \003(\t\022\021\n\tavada_url"
    "\030\007 \003(\t\022\014\n\004dist\030\010 \003(\r\022\034\n\006gender\030\t \003(\0162\014.C"
    "ell.Gender\022\r\n\005alive\030\n \003(\r\022!\n\tcard_type\030\013"
    " \003(\0162\016.Cell.CardType\"\235\001\n\rPostUGCReqMsg\022\013"
    "\n\003uid\030\001 \002(\r\022\025\n\rsession_token\030\002 \002(\t\022\016\n\006ug"
    "c_id\030\003 \001(\004\022\014\n\004msid\030\004 \001(\004\022\017\n\007org_uid\030\005 \001("
    "\r\022!\n\tpost_type\030\006 \001(\0162\016.Cell.PostType\022\026\n\003"
    "geo\030\007 \001(\0132\t.Cell.Geo\"1\n\016PostUGCRespMsg\022\037"
    "\n\010ret_code\030\001 \002(\0162\r.Cell.RetCode\"\230\001\n\020GetU"
    "GCListReqMsg\022\013\n\003uid\030\001 \002(\r\022\025\n\rsession_tok"
    "en\030\002 \002(\t\022(\n\rugc_list_type\030\003 \001(\0162\021.Cell.U"
    "GCListType\022\024\n\014need_ugc_num\030\004 \001(\r\022\017\n\007last"
    "_id\030\005 \001(\r\022\017\n\007org_uid\030\006 \001(\r\"Z\n\021GetUGCList"
    "RespMsg\022\037\n\010ret_code\030\001 \002(\0162\r.Cell.RetCode"
    "\022$\n\013ugc_id_list\030\002 \003(\0132\017.Cell.UGCIdList\"v"
    "\n\020AddCommentReqMsg\022\013\n\003uid\030\001 \002(\r\022\025\n\rsessi"
    "on_token\030\002 \002(\t\022\016\n\006ugc_id\030\003 \001(\004\022\014\n\004msid\030\004"
    " \001(\004\022\017\n\007org_uid\030\005 \001(\r\022\017\n\007comment\030\006 \001(\t\"B"
    "\n\021AddCommentRespMsg\022\037\n\010ret_code\030\001 \002(\0162\r."
    "Cell.RetCode\022\014\n\004mcid\030\002 \001(\004\"\217\001\n\020GetCommen"
    "tReqMsg\022\013\n\003uid\030\001 \002(\r\022\025\n\rsession_token\030\002 "
    "\002(\t\022\'\n\014comment_type\030\003 \002(\0162\021.Cell.Comment"
    "Type\022\013\n\003cid\030\004 \002(\004\022\017\n\007last_id\030\005 \001(\004\022\020\n\010ne"
    "ed_num\030\006 \001(\r\"\340\001\n\021GetCommentRespMsg\022\037\n\010re"
    "t_code\030\001 \002(\0162\r.Cell.RetCode\0227\n\010comments\030"
    "\002 \003(\0132%.Cell.GetCommentRespMsg.CommentDe"
    "tail\032q\n\rCommentDetail\022\014\n\004mcid\030\001 \001(\004\022\013\n\003u"
    "id\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\021\n\tavada_url\030\004 \001("
    "\t\022\017\n\007comment\030\005 \001(\t\022\023\n\013create_time\030\006 \001(\t\""
    "\207\001\n\023AddCollectionReqMsg\022\013\n\003uid\030\001 \002(\r\022\025\n\r"
    "session_token\030\002 \002(\t\022&\n\013confirmType\030\003 \002(\016"
    "2\021.Cell.ConfirmType\022$\n\013ugc_id_list\030\004 \002(\013"
    "2\017.Cell.UGCIdList\"G\n\024AddCollectionRespMs"
    "g\022\037\n\010ret_code\030\001 \002(\0162\r.Cell.RetCode\022\016\n\006cl"
    "t_id\030\002 \001(\004\"Z\n\016PlayCardReqMsg\022\013\n\003uid\030\001 \002("
    "\r\022\025\n\rsession_token\030\002 \002(\t\022\026\n\003geo\030\003 \001(\0132\t."
    "Cell.Geo\022\014\n\004coin\030\004 \001(\005\"2\n\017PlayCardRespMs"
    "g\022\037\n\010ret_code\030\001 \002(\0162\r.Cell.RetCode", 2194);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ugc.proto", &protobuf_RegisterTypes);
  UploadUGCReqMsg::default_instance_ = new UploadUGCReqMsg();
  UploadUGCRespMsg::default_instance_ = new UploadUGCRespMsg();
  PullUGCReqMsg::default_instance_ = new PullUGCReqMsg();
  PullUGCRespMsg::default_instance_ = new PullUGCRespMsg();
  GetUGCReqMsg::default_instance_ = new GetUGCReqMsg();
  GetUGCRespMsg::default_instance_ = new GetUGCRespMsg();
  PostUGCReqMsg::default_instance_ = new PostUGCReqMsg();
  PostUGCRespMsg::default_instance_ = new PostUGCRespMsg();
  GetUGCListReqMsg::default_instance_ = new GetUGCListReqMsg();
  GetUGCListRespMsg::default_instance_ = new GetUGCListRespMsg();
  AddCommentReqMsg::default_instance_ = new AddCommentReqMsg();
  AddCommentRespMsg::default_instance_ = new AddCommentRespMsg();
  GetCommentReqMsg::default_instance_ = new GetCommentReqMsg();
  GetCommentRespMsg::default_instance_ = new GetCommentRespMsg();
  GetCommentRespMsg_CommentDetail::default_instance_ = new GetCommentRespMsg_CommentDetail();
  AddCollectionReqMsg::default_instance_ = new AddCollectionReqMsg();
  AddCollectionRespMsg::default_instance_ = new AddCollectionRespMsg();
  PlayCardReqMsg::default_instance_ = new PlayCardReqMsg();
  PlayCardRespMsg::default_instance_ = new PlayCardRespMsg();
  UploadUGCReqMsg::default_instance_->InitAsDefaultInstance();
  UploadUGCRespMsg::default_instance_->InitAsDefaultInstance();
  PullUGCReqMsg::default_instance_->InitAsDefaultInstance();
  PullUGCRespMsg::default_instance_->InitAsDefaultInstance();
  GetUGCReqMsg::default_instance_->InitAsDefaultInstance();
  GetUGCRespMsg::default_instance_->InitAsDefaultInstance();
  PostUGCReqMsg::default_instance_->InitAsDefaultInstance();
  PostUGCRespMsg::default_instance_->InitAsDefaultInstance();
  GetUGCListReqMsg::default_instance_->InitAsDefaultInstance();
  GetUGCListRespMsg::default_instance_->InitAsDefaultInstance();
  AddCommentReqMsg::default_instance_->InitAsDefaultInstance();
  AddCommentRespMsg::default_instance_->InitAsDefaultInstance();
  GetCommentReqMsg::default_instance_->InitAsDefaultInstance();
  GetCommentRespMsg::default_instance_->InitAsDefaultInstance();
  GetCommentRespMsg_CommentDetail::default_instance_->InitAsDefaultInstance();
  AddCollectionReqMsg::default_instance_->InitAsDefaultInstance();
  AddCollectionRespMsg::default_instance_->InitAsDefaultInstance();
  PlayCardReqMsg::default_instance_->InitAsDefaultInstance();
  PlayCardRespMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ugc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ugc_2eproto {
  StaticDescriptorInitializer_ugc_2eproto() {
    protobuf_AddDesc_ugc_2eproto();
  }
} static_descriptor_initializer_ugc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UploadUGCReqMsg::kUidFieldNumber;
const int UploadUGCReqMsg::kSessionTokenFieldNumber;
const int UploadUGCReqMsg::kUgcFieldNumber;
#endif  // !_MSC_VER

UploadUGCReqMsg::UploadUGCReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadUGCReqMsg::InitAsDefaultInstance() {
  ugc_ = const_cast< ::Cell::UGC*>(&::Cell::UGC::default_instance());
}

UploadUGCReqMsg::UploadUGCReqMsg(const UploadUGCReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadUGCReqMsg::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  session_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ugc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadUGCReqMsg::~UploadUGCReqMsg() {
  SharedDtor();
}

void UploadUGCReqMsg::SharedDtor() {
  if (session_token_ != &::google::protobuf::internal::kEmptyString) {
    delete session_token_;
  }
  if (this != default_instance_) {
    delete ugc_;
  }
}

void UploadUGCReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadUGCReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadUGCReqMsg_descriptor_;
}

const UploadUGCReqMsg& UploadUGCReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ugc_2eproto();
  return *default_instance_;
}

UploadUGCReqMsg* UploadUGCReqMsg::default_instance_ = NULL;

UploadUGCReqMsg* UploadUGCReqMsg::New() const {
  return new UploadUGCReqMsg;
}

void UploadUGCReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_session_token()) {
      if (session_token_ != &::google::protobuf::internal::kEmptyString) {
        session_token_->clear();
      }
    }
    if (has_ugc()) {
      if (ugc_ != NULL) ugc_->::Cell::UGC::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadUGCReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_token;
        break;
      }

      // required string session_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_token().data(), this->session_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ugc;
        break;
      }

      // optional .Cell.UGC ugc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ugc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ugc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadUGCReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required string session_token = 2;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_token(), output);
  }

  // optional .Cell.UGC ugc = 3;
  if (has_ugc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ugc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadUGCReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required string session_token = 2;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_token(), target);
  }

  // optional .Cell.UGC ugc = 3;
  if (has_ugc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ugc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadUGCReqMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required string session_token = 2;
    if (has_session_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_token());
    }

    // optional .Cell.UGC ugc = 3;
    if (has_ugc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ugc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadUGCReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadUGCReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadUGCReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadUGCReqMsg::MergeFrom(const UploadUGCReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_session_token()) {
      set_session_token(from.session_token());
    }
    if (from.has_ugc()) {
      mutable_ugc()->::Cell::UGC::MergeFrom(from.ugc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadUGCReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadUGCReqMsg::CopyFrom(const UploadUGCReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadUGCReqMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_ugc()) {
    if (!this->ugc().IsInitialized()) return false;
  }
  return true;
}

void UploadUGCReqMsg::Swap(UploadUGCReqMsg* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(session_token_, other->session_token_);
    std::swap(ugc_, other->ugc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadUGCReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadUGCReqMsg_descriptor_;
  metadata.reflection = UploadUGCReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadUGCRespMsg::kRetCodeFieldNumber;
const int UploadUGCRespMsg::kUgcIdFieldNumber;
#endif  // !_MSC_VER

UploadUGCRespMsg::UploadUGCRespMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UploadUGCRespMsg::InitAsDefaultInstance() {
}

UploadUGCRespMsg::UploadUGCRespMsg(const UploadUGCRespMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UploadUGCRespMsg::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  ugc_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadUGCRespMsg::~UploadUGCRespMsg() {
  SharedDtor();
}

void UploadUGCRespMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UploadUGCRespMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadUGCRespMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadUGCRespMsg_descriptor_;
}

const UploadUGCRespMsg& UploadUGCRespMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ugc_2eproto();
  return *default_instance_;
}

UploadUGCRespMsg* UploadUGCRespMsg::default_instance_ = NULL;

UploadUGCRespMsg* UploadUGCRespMsg::New() const {
  return new UploadUGCRespMsg;
}

void UploadUGCRespMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    ugc_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadUGCRespMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Cell.RetCode ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::RetCode_IsValid(value)) {
            set_ret_code(static_cast< ::Cell::RetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ugc_id;
        break;
      }

      // optional uint64 ugc_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ugc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_id_)));
          set_has_ugc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UploadUGCRespMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret_code(), output);
  }

  // optional uint64 ugc_id = 2;
  if (has_ugc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ugc_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UploadUGCRespMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret_code(), target);
  }

  // optional uint64 ugc_id = 2;
  if (has_ugc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ugc_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UploadUGCRespMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Cell.RetCode ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret_code());
    }

    // optional uint64 ugc_id = 2;
    if (has_ugc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugc_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadUGCRespMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadUGCRespMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadUGCRespMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadUGCRespMsg::MergeFrom(const UploadUGCRespMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_ugc_id()) {
      set_ugc_id(from.ugc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadUGCRespMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadUGCRespMsg::CopyFrom(const UploadUGCRespMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadUGCRespMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UploadUGCRespMsg::Swap(UploadUGCRespMsg* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(ugc_id_, other->ugc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadUGCRespMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadUGCRespMsg_descriptor_;
  metadata.reflection = UploadUGCRespMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PullUGCReqMsg::kUidFieldNumber;
const int PullUGCReqMsg::kSessionTokenFieldNumber;
const int PullUGCReqMsg::kGeoFieldNumber;
const int PullUGCReqMsg::kNeedNumFieldNumber;
const int PullUGCReqMsg::kLastIdFieldNumber;
const int PullUGCReqMsg::kPullTypeFieldNumber;
const int PullUGCReqMsg::kForbidUidFieldNumber;
#endif  // !_MSC_VER

PullUGCReqMsg::PullUGCReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PullUGCReqMsg::InitAsDefaultInstance() {
  geo_ = const_cast< ::Cell::Geo*>(&::Cell::Geo::default_instance());
}

PullUGCReqMsg::PullUGCReqMsg(const PullUGCReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PullUGCReqMsg::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  session_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  geo_ = NULL;
  need_num_ = 0u;
  last_id_ = GOOGLE_ULONGLONG(0);
  pull_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PullUGCReqMsg::~PullUGCReqMsg() {
  SharedDtor();
}

void PullUGCReqMsg::SharedDtor() {
  if (session_token_ != &::google::protobuf::internal::kEmptyString) {
    delete session_token_;
  }
  if (this != default_instance_) {
    delete geo_;
  }
}

void PullUGCReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PullUGCReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PullUGCReqMsg_descriptor_;
}

const PullUGCReqMsg& PullUGCReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ugc_2eproto();
  return *default_instance_;
}

PullUGCReqMsg* PullUGCReqMsg::default_instance_ = NULL;

PullUGCReqMsg* PullUGCReqMsg::New() const {
  return new PullUGCReqMsg;
}

void PullUGCReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_session_token()) {
      if (session_token_ != &::google::protobuf::internal::kEmptyString) {
        session_token_->clear();
      }
    }
    if (has_geo()) {
      if (geo_ != NULL) geo_->::Cell::Geo::Clear();
    }
    need_num_ = 0u;
    last_id_ = GOOGLE_ULONGLONG(0);
    pull_type_ = 0;
  }
  forbid_uid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PullUGCReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_token;
        break;
      }

      // required string session_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_token().data(), this->session_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_geo;
        break;
      }

      // optional .Cell.Geo geo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_need_num;
        break;
      }

      // optional uint32 need_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_num_)));
          set_has_need_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_id;
        break;
      }

      // optional uint64 last_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_id_)));
          set_has_last_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pull_type;
        break;
      }

      // optional .Cell.PullType pull_type = 6 [default = PT_PULL];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pull_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::PullType_IsValid(value)) {
            set_pull_type(static_cast< ::Cell::PullType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_forbid_uid;
        break;
      }

      // repeated uint32 forbid_uid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forbid_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_forbid_uid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_forbid_uid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_forbid_uid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PullUGCReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required string session_token = 2;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_token(), output);
  }

  // optional .Cell.Geo geo = 3;
  if (has_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->geo(), output);
  }

  // optional uint32 need_num = 4;
  if (has_need_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->need_num(), output);
  }

  // optional uint64 last_id = 5;
  if (has_last_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->last_id(), output);
  }

  // optional .Cell.PullType pull_type = 6 [default = PT_PULL];
  if (has_pull_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->pull_type(), output);
  }

  // repeated uint32 forbid_uid = 7;
  for (int i = 0; i < this->forbid_uid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->forbid_uid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PullUGCReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required string session_token = 2;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_token(), target);
  }

  // optional .Cell.Geo geo = 3;
  if (has_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->geo(), target);
  }

  // optional uint32 need_num = 4;
  if (has_need_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->need_num(), target);
  }

  // optional uint64 last_id = 5;
  if (has_last_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->last_id(), target);
  }

  // optional .Cell.PullType pull_type = 6 [default = PT_PULL];
  if (has_pull_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->pull_type(), target);
  }

  // repeated uint32 forbid_uid = 7;
  for (int i = 0; i < this->forbid_uid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->forbid_uid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PullUGCReqMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required string session_token = 2;
    if (has_session_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_token());
    }

    // optional .Cell.Geo geo = 3;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo());
    }

    // optional uint32 need_num = 4;
    if (has_need_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need_num());
    }

    // optional uint64 last_id = 5;
    if (has_last_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_id());
    }

    // optional .Cell.PullType pull_type = 6 [default = PT_PULL];
    if (has_pull_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pull_type());
    }

  }
  // repeated uint32 forbid_uid = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->forbid_uid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->forbid_uid(i));
    }
    total_size += 1 * this->forbid_uid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PullUGCReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PullUGCReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PullUGCReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PullUGCReqMsg::MergeFrom(const PullUGCReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  forbid_uid_.MergeFrom(from.forbid_uid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_session_token()) {
      set_session_token(from.session_token());
    }
    if (from.has_geo()) {
      mutable_geo()->::Cell::Geo::MergeFrom(from.geo());
    }
    if (from.has_need_num()) {
      set_need_num(from.need_num());
    }
    if (from.has_last_id()) {
      set_last_id(from.last_id());
    }
    if (from.has_pull_type()) {
      set_pull_type(from.pull_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PullUGCReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullUGCReqMsg::CopyFrom(const PullUGCReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullUGCReqMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_geo()) {
    if (!this->geo().IsInitialized()) return false;
  }
  return true;
}

void PullUGCReqMsg::Swap(PullUGCReqMsg* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(session_token_, other->session_token_);
    std::swap(geo_, other->geo_);
    std::swap(need_num_, other->need_num_);
    std::swap(last_id_, other->last_id_);
    std::swap(pull_type_, other->pull_type_);
    forbid_uid_.Swap(&other->forbid_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PullUGCReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PullUGCReqMsg_descriptor_;
  metadata.reflection = PullUGCReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PullUGCRespMsg::kRetCodeFieldNumber;
const int PullUGCRespMsg::kUgcIdListFieldNumber;
#endif  // !_MSC_VER

PullUGCRespMsg::PullUGCRespMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PullUGCRespMsg::InitAsDefaultInstance() {
}

PullUGCRespMsg::PullUGCRespMsg(const PullUGCRespMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PullUGCRespMsg::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PullUGCRespMsg::~PullUGCRespMsg() {
  SharedDtor();
}

void PullUGCRespMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PullUGCRespMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PullUGCRespMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PullUGCRespMsg_descriptor_;
}

const PullUGCRespMsg& PullUGCRespMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ugc_2eproto();
  return *default_instance_;
}

PullUGCRespMsg* PullUGCRespMsg::default_instance_ = NULL;

PullUGCRespMsg* PullUGCRespMsg::New() const {
  return new PullUGCRespMsg;
}

void PullUGCRespMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
  }
  ugc_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PullUGCRespMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Cell.RetCode ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::RetCode_IsValid(value)) {
            set_ret_code(static_cast< ::Cell::RetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ugc_id_list;
        break;
      }

      // repeated .Cell.UGCIdList ugc_id_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ugc_id_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ugc_id_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ugc_id_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PullUGCRespMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret_code(), output);
  }

  // repeated .Cell.UGCIdList ugc_id_list = 2;
  for (int i = 0; i < this->ugc_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ugc_id_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PullUGCRespMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret_code(), target);
  }

  // repeated .Cell.UGCIdList ugc_id_list = 2;
  for (int i = 0; i < this->ugc_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ugc_id_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PullUGCRespMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Cell.RetCode ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret_code());
    }

  }
  // repeated .Cell.UGCIdList ugc_id_list = 2;
  total_size += 1 * this->ugc_id_list_size();
  for (int i = 0; i < this->ugc_id_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ugc_id_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PullUGCRespMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PullUGCRespMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PullUGCRespMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PullUGCRespMsg::MergeFrom(const PullUGCRespMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  ugc_id_list_.MergeFrom(from.ugc_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PullUGCRespMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullUGCRespMsg::CopyFrom(const PullUGCRespMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullUGCRespMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PullUGCRespMsg::Swap(PullUGCRespMsg* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    ugc_id_list_.Swap(&other->ugc_id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PullUGCRespMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PullUGCRespMsg_descriptor_;
  metadata.reflection = PullUGCRespMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUGCReqMsg::kUidFieldNumber;
const int GetUGCReqMsg::kSessionTokenFieldNumber;
const int GetUGCReqMsg::kUgcIdFieldNumber;
const int GetUGCReqMsg::kOrgUidFieldNumber;
const int GetUGCReqMsg::kGeoFieldNumber;
#endif  // !_MSC_VER

GetUGCReqMsg::GetUGCReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUGCReqMsg::InitAsDefaultInstance() {
  geo_ = const_cast< ::Cell::Geo*>(&::Cell::Geo::default_instance());
}

GetUGCReqMsg::GetUGCReqMsg(const GetUGCReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUGCReqMsg::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  session_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  geo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUGCReqMsg::~GetUGCReqMsg() {
  SharedDtor();
}

void GetUGCReqMsg::SharedDtor() {
  if (session_token_ != &::google::protobuf::internal::kEmptyString) {
    delete session_token_;
  }
  if (this != default_instance_) {
    delete geo_;
  }
}

void GetUGCReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUGCReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUGCReqMsg_descriptor_;
}

const GetUGCReqMsg& GetUGCReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ugc_2eproto();
  return *default_instance_;
}

GetUGCReqMsg* GetUGCReqMsg::default_instance_ = NULL;

GetUGCReqMsg* GetUGCReqMsg::New() const {
  return new GetUGCReqMsg;
}

void GetUGCReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_session_token()) {
      if (session_token_ != &::google::protobuf::internal::kEmptyString) {
        session_token_->clear();
      }
    }
    if (has_geo()) {
      if (geo_ != NULL) geo_->::Cell::Geo::Clear();
    }
  }
  ugc_id_.Clear();
  org_uid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUGCReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_token;
        break;
      }

      // required string session_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_token().data(), this->session_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ugc_id;
        break;
      }

      // repeated uint64 ugc_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ugc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_ugc_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ugc_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ugc_id;
        if (input->ExpectTag(32)) goto parse_org_uid;
        break;
      }

      // repeated uint32 org_uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_org_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_org_uid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_org_uid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_org_uid;
        if (input->ExpectTag(42)) goto parse_geo;
        break;
      }

      // optional .Cell.Geo geo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUGCReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required string session_token = 2;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_token(), output);
  }

  // repeated uint64 ugc_id = 3;
  for (int i = 0; i < this->ugc_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->ugc_id(i), output);
  }

  // repeated uint32 org_uid = 4;
  for (int i = 0; i < this->org_uid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->org_uid(i), output);
  }

  // optional .Cell.Geo geo = 5;
  if (has_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->geo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUGCReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required string session_token = 2;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_token(), target);
  }

  // repeated uint64 ugc_id = 3;
  for (int i = 0; i < this->ugc_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->ugc_id(i), target);
  }

  // repeated uint32 org_uid = 4;
  for (int i = 0; i < this->org_uid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->org_uid(i), target);
  }

  // optional .Cell.Geo geo = 5;
  if (has_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->geo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUGCReqMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required string session_token = 2;
    if (has_session_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_token());
    }

    // optional .Cell.Geo geo = 5;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo());
    }

  }
  // repeated uint64 ugc_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->ugc_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->ugc_id(i));
    }
    total_size += 1 * this->ugc_id_size() + data_size;
  }

  // repeated uint32 org_uid = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->org_uid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->org_uid(i));
    }
    total_size += 1 * this->org_uid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUGCReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUGCReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUGCReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUGCReqMsg::MergeFrom(const GetUGCReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  ugc_id_.MergeFrom(from.ugc_id_);
  org_uid_.MergeFrom(from.org_uid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_session_token()) {
      set_session_token(from.session_token());
    }
    if (from.has_geo()) {
      mutable_geo()->::Cell::Geo::MergeFrom(from.geo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUGCReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUGCReqMsg::CopyFrom(const GetUGCReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUGCReqMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_geo()) {
    if (!this->geo().IsInitialized()) return false;
  }
  return true;
}

void GetUGCReqMsg::Swap(GetUGCReqMsg* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(session_token_, other->session_token_);
    ugc_id_.Swap(&other->ugc_id_);
    org_uid_.Swap(&other->org_uid_);
    std::swap(geo_, other->geo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUGCReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUGCReqMsg_descriptor_;
  metadata.reflection = GetUGCReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUGCRespMsg::kRetCodeFieldNumber;
const int GetUGCRespMsg::kUgcFieldNumber;
const int GetUGCRespMsg::kPostNumFieldNumber;
const int GetUGCRespMsg::kPassNumFieldNumber;
const int GetUGCRespMsg::kPostDistFieldNumber;
const int GetUGCRespMsg::kUsrNameFieldNumber;
const int GetUGCRespMsg::kAvadaUrlFieldNumber;
const int GetUGCRespMsg::kDistFieldNumber;
const int GetUGCRespMsg::kGenderFieldNumber;
const int GetUGCRespMsg::kAliveFieldNumber;
const int GetUGCRespMsg::kCardTypeFieldNumber;
#endif  // !_MSC_VER

GetUGCRespMsg::GetUGCRespMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUGCRespMsg::InitAsDefaultInstance() {
}

GetUGCRespMsg::GetUGCRespMsg(const GetUGCRespMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUGCRespMsg::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUGCRespMsg::~GetUGCRespMsg() {
  SharedDtor();
}

void GetUGCRespMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetUGCRespMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUGCRespMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUGCRespMsg_descriptor_;
}

const GetUGCRespMsg& GetUGCRespMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ugc_2eproto();
  return *default_instance_;
}

GetUGCRespMsg* GetUGCRespMsg::default_instance_ = NULL;

GetUGCRespMsg* GetUGCRespMsg::New() const {
  return new GetUGCRespMsg;
}

void GetUGCRespMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
  }
  ugc_.Clear();
  post_num_.Clear();
  pass_num_.Clear();
  post_dist_.Clear();
  usr_name_.Clear();
  avada_url_.Clear();
  dist_.Clear();
  gender_.Clear();
  alive_.Clear();
  card_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUGCRespMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Cell.RetCode ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::RetCode_IsValid(value)) {
            set_ret_code(static_cast< ::Cell::RetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ugc;
        break;
      }

      // repeated .Cell.UGC ugc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ugc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ugc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ugc;
        if (input->ExpectTag(24)) goto parse_post_num;
        break;
      }

      // repeated uint32 post_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_post_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_post_num())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_post_num())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_post_num;
        if (input->ExpectTag(32)) goto parse_pass_num;
        break;
      }

      // repeated uint32 pass_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_pass_num())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pass_num())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pass_num;
        if (input->ExpectTag(40)) goto parse_post_dist;
        break;
      }

      // repeated uint32 post_dist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_post_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_post_dist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_post_dist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_post_dist;
        if (input->ExpectTag(50)) goto parse_usr_name;
        break;
      }

      // repeated string usr_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usr_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_usr_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usr_name(this->usr_name_size() - 1).data(),
            this->usr_name(this->usr_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_usr_name;
        if (input->ExpectTag(58)) goto parse_avada_url;
        break;
      }

      // repeated string avada_url = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avada_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_avada_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->avada_url(this->avada_url_size() - 1).data(),
            this->avada_url(this->avada_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_avada_url;
        if (input->ExpectTag(64)) goto parse_dist;
        break;
      }

      // repeated uint32 dist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_dist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dist;
        if (input->ExpectTag(72)) goto parse_gender;
        break;
      }

      // repeated .Cell.Gender gender = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::Gender_IsValid(value)) {
            add_gender(static_cast< ::Cell::Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::Cell::Gender_IsValid,
                 this->mutable_gender())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_gender;
        if (input->ExpectTag(80)) goto parse_alive;
        break;
      }

      // repeated uint32 alive = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_alive())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_alive())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_alive;
        if (input->ExpectTag(88)) goto parse_card_type;
        break;
      }

      // repeated .Cell.CardType card_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::CardType_IsValid(value)) {
            add_card_type(static_cast< ::Cell::CardType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::Cell::CardType_IsValid,
                 this->mutable_card_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_card_type;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUGCRespMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret_code(), output);
  }

  // repeated .Cell.UGC ugc = 2;
  for (int i = 0; i < this->ugc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ugc(i), output);
  }

  // repeated uint32 post_num = 3;
  for (int i = 0; i < this->post_num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->post_num(i), output);
  }

  // repeated uint32 pass_num = 4;
  for (int i = 0; i < this->pass_num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->pass_num(i), output);
  }

  // repeated uint32 post_dist = 5;
  for (int i = 0; i < this->post_dist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->post_dist(i), output);
  }

  // repeated string usr_name = 6;
  for (int i = 0; i < this->usr_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->usr_name(i).data(), this->usr_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->usr_name(i), output);
  }

  // repeated string avada_url = 7;
  for (int i = 0; i < this->avada_url_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->avada_url(i).data(), this->avada_url(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->avada_url(i), output);
  }

  // repeated uint32 dist = 8;
  for (int i = 0; i < this->dist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->dist(i), output);
  }

  // repeated .Cell.Gender gender = 9;
  for (int i = 0; i < this->gender_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->gender(i), output);
  }

  // repeated uint32 alive = 10;
  for (int i = 0; i < this->alive_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->alive(i), output);
  }

  // repeated .Cell.CardType card_type = 11;
  for (int i = 0; i < this->card_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->card_type(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUGCRespMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret_code(), target);
  }

  // repeated .Cell.UGC ugc = 2;
  for (int i = 0; i < this->ugc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ugc(i), target);
  }

  // repeated uint32 post_num = 3;
  for (int i = 0; i < this->post_num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->post_num(i), target);
  }

  // repeated uint32 pass_num = 4;
  for (int i = 0; i < this->pass_num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->pass_num(i), target);
  }

  // repeated uint32 post_dist = 5;
  for (int i = 0; i < this->post_dist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->post_dist(i), target);
  }

  // repeated string usr_name = 6;
  for (int i = 0; i < this->usr_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usr_name(i).data(), this->usr_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->usr_name(i), target);
  }

  // repeated string avada_url = 7;
  for (int i = 0; i < this->avada_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avada_url(i).data(), this->avada_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->avada_url(i), target);
  }

  // repeated uint32 dist = 8;
  for (int i = 0; i < this->dist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->dist(i), target);
  }

  // repeated .Cell.Gender gender = 9;
  for (int i = 0; i < this->gender_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->gender(i), target);
  }

  // repeated uint32 alive = 10;
  for (int i = 0; i < this->alive_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->alive(i), target);
  }

  // repeated .Cell.CardType card_type = 11;
  for (int i = 0; i < this->card_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->card_type(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUGCRespMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Cell.RetCode ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret_code());
    }

  }
  // repeated .Cell.UGC ugc = 2;
  total_size += 1 * this->ugc_size();
  for (int i = 0; i < this->ugc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ugc(i));
  }

  // repeated uint32 post_num = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->post_num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->post_num(i));
    }
    total_size += 1 * this->post_num_size() + data_size;
  }

  // repeated uint32 pass_num = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->pass_num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->pass_num(i));
    }
    total_size += 1 * this->pass_num_size() + data_size;
  }

  // repeated uint32 post_dist = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->post_dist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->post_dist(i));
    }
    total_size += 1 * this->post_dist_size() + data_size;
  }

  // repeated string usr_name = 6;
  total_size += 1 * this->usr_name_size();
  for (int i = 0; i < this->usr_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->usr_name(i));
  }

  // repeated string avada_url = 7;
  total_size += 1 * this->avada_url_size();
  for (int i = 0; i < this->avada_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->avada_url(i));
  }

  // repeated uint32 dist = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->dist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dist(i));
    }
    total_size += 1 * this->dist_size() + data_size;
  }

  // repeated .Cell.Gender gender = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->gender_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->gender(i));
    }
    total_size += 1 * this->gender_size() + data_size;
  }

  // repeated uint32 alive = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->alive_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->alive(i));
    }
    total_size += 1 * this->alive_size() + data_size;
  }

  // repeated .Cell.CardType card_type = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->card_type(i));
    }
    total_size += 1 * this->card_type_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUGCRespMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUGCRespMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUGCRespMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUGCRespMsg::MergeFrom(const GetUGCRespMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  ugc_.MergeFrom(from.ugc_);
  post_num_.MergeFrom(from.post_num_);
  pass_num_.MergeFrom(from.pass_num_);
  post_dist_.MergeFrom(from.post_dist_);
  usr_name_.MergeFrom(from.usr_name_);
  avada_url_.MergeFrom(from.avada_url_);
  dist_.MergeFrom(from.dist_);
  gender_.MergeFrom(from.gender_);
  alive_.MergeFrom(from.alive_);
  card_type_.MergeFrom(from.card_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUGCRespMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUGCRespMsg::CopyFrom(const GetUGCRespMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUGCRespMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < ugc_size(); i++) {
    if (!this->ugc(i).IsInitialized()) return false;
  }
  return true;
}

void GetUGCRespMsg::Swap(GetUGCRespMsg* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    ugc_.Swap(&other->ugc_);
    post_num_.Swap(&other->post_num_);
    pass_num_.Swap(&other->pass_num_);
    post_dist_.Swap(&other->post_dist_);
    usr_name_.Swap(&other->usr_name_);
    avada_url_.Swap(&other->avada_url_);
    dist_.Swap(&other->dist_);
    gender_.Swap(&other->gender_);
    alive_.Swap(&other->alive_);
    card_type_.Swap(&other->card_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUGCRespMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUGCRespMsg_descriptor_;
  metadata.reflection = GetUGCRespMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostUGCReqMsg::kUidFieldNumber;
const int PostUGCReqMsg::kSessionTokenFieldNumber;
const int PostUGCReqMsg::kUgcIdFieldNumber;
const int PostUGCReqMsg::kMsidFieldNumber;
const int PostUGCReqMsg::kOrgUidFieldNumber;
const int PostUGCReqMsg::kPostTypeFieldNumber;
const int PostUGCReqMsg::kGeoFieldNumber;
#endif  // !_MSC_VER

PostUGCReqMsg::PostUGCReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostUGCReqMsg::InitAsDefaultInstance() {
  geo_ = const_cast< ::Cell::Geo*>(&::Cell::Geo::default_instance());
}

PostUGCReqMsg::PostUGCReqMsg(const PostUGCReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostUGCReqMsg::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  session_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ugc_id_ = GOOGLE_ULONGLONG(0);
  msid_ = GOOGLE_ULONGLONG(0);
  org_uid_ = 0u;
  post_type_ = 0;
  geo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostUGCReqMsg::~PostUGCReqMsg() {
  SharedDtor();
}

void PostUGCReqMsg::SharedDtor() {
  if (session_token_ != &::google::protobuf::internal::kEmptyString) {
    delete session_token_;
  }
  if (this != default_instance_) {
    delete geo_;
  }
}

void PostUGCReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostUGCReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostUGCReqMsg_descriptor_;
}

const PostUGCReqMsg& PostUGCReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ugc_2eproto();
  return *default_instance_;
}

PostUGCReqMsg* PostUGCReqMsg::default_instance_ = NULL;

PostUGCReqMsg* PostUGCReqMsg::New() const {
  return new PostUGCReqMsg;
}

void PostUGCReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_session_token()) {
      if (session_token_ != &::google::protobuf::internal::kEmptyString) {
        session_token_->clear();
      }
    }
    ugc_id_ = GOOGLE_ULONGLONG(0);
    msid_ = GOOGLE_ULONGLONG(0);
    org_uid_ = 0u;
    post_type_ = 0;
    if (has_geo()) {
      if (geo_ != NULL) geo_->::Cell::Geo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostUGCReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_token;
        break;
      }

      // required string session_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_token().data(), this->session_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ugc_id;
        break;
      }

      // optional uint64 ugc_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ugc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_id_)));
          set_has_ugc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_msid;
        break;
      }

      // optional uint64 msid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msid_)));
          set_has_msid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_org_uid;
        break;
      }

      // optional uint32 org_uid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_org_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &org_uid_)));
          set_has_org_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_post_type;
        break;
      }

      // optional .Cell.PostType post_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_post_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::PostType_IsValid(value)) {
            set_post_type(static_cast< ::Cell::PostType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_geo;
        break;
      }

      // optional .Cell.Geo geo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostUGCReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required string session_token = 2;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_token(), output);
  }

  // optional uint64 ugc_id = 3;
  if (has_ugc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ugc_id(), output);
  }

  // optional uint64 msid = 4;
  if (has_msid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->msid(), output);
  }

  // optional uint32 org_uid = 5;
  if (has_org_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->org_uid(), output);
  }

  // optional .Cell.PostType post_type = 6;
  if (has_post_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->post_type(), output);
  }

  // optional .Cell.Geo geo = 7;
  if (has_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->geo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostUGCReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required string session_token = 2;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_token(), target);
  }

  // optional uint64 ugc_id = 3;
  if (has_ugc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ugc_id(), target);
  }

  // optional uint64 msid = 4;
  if (has_msid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->msid(), target);
  }

  // optional uint32 org_uid = 5;
  if (has_org_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->org_uid(), target);
  }

  // optional .Cell.PostType post_type = 6;
  if (has_post_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->post_type(), target);
  }

  // optional .Cell.Geo geo = 7;
  if (has_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->geo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostUGCReqMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required string session_token = 2;
    if (has_session_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_token());
    }

    // optional uint64 ugc_id = 3;
    if (has_ugc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugc_id());
    }

    // optional uint64 msid = 4;
    if (has_msid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msid());
    }

    // optional uint32 org_uid = 5;
    if (has_org_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->org_uid());
    }

    // optional .Cell.PostType post_type = 6;
    if (has_post_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->post_type());
    }

    // optional .Cell.Geo geo = 7;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostUGCReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostUGCReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostUGCReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostUGCReqMsg::MergeFrom(const PostUGCReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_session_token()) {
      set_session_token(from.session_token());
    }
    if (from.has_ugc_id()) {
      set_ugc_id(from.ugc_id());
    }
    if (from.has_msid()) {
      set_msid(from.msid());
    }
    if (from.has_org_uid()) {
      set_org_uid(from.org_uid());
    }
    if (from.has_post_type()) {
      set_post_type(from.post_type());
    }
    if (from.has_geo()) {
      mutable_geo()->::Cell::Geo::MergeFrom(from.geo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostUGCReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostUGCReqMsg::CopyFrom(const PostUGCReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostUGCReqMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_geo()) {
    if (!this->geo().IsInitialized()) return false;
  }
  return true;
}

void PostUGCReqMsg::Swap(PostUGCReqMsg* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(session_token_, other->session_token_);
    std::swap(ugc_id_, other->ugc_id_);
    std::swap(msid_, other->msid_);
    std::swap(org_uid_, other->org_uid_);
    std::swap(post_type_, other->post_type_);
    std::swap(geo_, other->geo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostUGCReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostUGCReqMsg_descriptor_;
  metadata.reflection = PostUGCReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostUGCRespMsg::kRetCodeFieldNumber;
#endif  // !_MSC_VER

PostUGCRespMsg::PostUGCRespMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostUGCRespMsg::InitAsDefaultInstance() {
}

PostUGCRespMsg::PostUGCRespMsg(const PostUGCRespMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostUGCRespMsg::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostUGCRespMsg::~PostUGCRespMsg() {
  SharedDtor();
}

void PostUGCRespMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PostUGCRespMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostUGCRespMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostUGCRespMsg_descriptor_;
}

const PostUGCRespMsg& PostUGCRespMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ugc_2eproto();
  return *default_instance_;
}

PostUGCRespMsg* PostUGCRespMsg::default_instance_ = NULL;

PostUGCRespMsg* PostUGCRespMsg::New() const {
  return new PostUGCRespMsg;
}

void PostUGCRespMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostUGCRespMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Cell.RetCode ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::RetCode_IsValid(value)) {
            set_ret_code(static_cast< ::Cell::RetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostUGCRespMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostUGCRespMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostUGCRespMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Cell.RetCode ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostUGCRespMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostUGCRespMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostUGCRespMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostUGCRespMsg::MergeFrom(const PostUGCRespMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostUGCRespMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostUGCRespMsg::CopyFrom(const PostUGCRespMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostUGCRespMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PostUGCRespMsg::Swap(PostUGCRespMsg* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostUGCRespMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostUGCRespMsg_descriptor_;
  metadata.reflection = PostUGCRespMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUGCListReqMsg::kUidFieldNumber;
const int GetUGCListReqMsg::kSessionTokenFieldNumber;
const int GetUGCListReqMsg::kUgcListTypeFieldNumber;
const int GetUGCListReqMsg::kNeedUgcNumFieldNumber;
const int GetUGCListReqMsg::kLastIdFieldNumber;
const int GetUGCListReqMsg::kOrgUidFieldNumber;
#endif  // !_MSC_VER

GetUGCListReqMsg::GetUGCListReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUGCListReqMsg::InitAsDefaultInstance() {
}

GetUGCListReqMsg::GetUGCListReqMsg(const GetUGCListReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUGCListReqMsg::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  session_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ugc_list_type_ = 0;
  need_ugc_num_ = 0u;
  last_id_ = 0u;
  org_uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUGCListReqMsg::~GetUGCListReqMsg() {
  SharedDtor();
}

void GetUGCListReqMsg::SharedDtor() {
  if (session_token_ != &::google::protobuf::internal::kEmptyString) {
    delete session_token_;
  }
  if (this != default_instance_) {
  }
}

void GetUGCListReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUGCListReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUGCListReqMsg_descriptor_;
}

const GetUGCListReqMsg& GetUGCListReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ugc_2eproto();
  return *default_instance_;
}

GetUGCListReqMsg* GetUGCListReqMsg::default_instance_ = NULL;

GetUGCListReqMsg* GetUGCListReqMsg::New() const {
  return new GetUGCListReqMsg;
}

void GetUGCListReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_session_token()) {
      if (session_token_ != &::google::protobuf::internal::kEmptyString) {
        session_token_->clear();
      }
    }
    ugc_list_type_ = 0;
    need_ugc_num_ = 0u;
    last_id_ = 0u;
    org_uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUGCListReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_token;
        break;
      }

      // required string session_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_token().data(), this->session_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ugc_list_type;
        break;
      }

      // optional .Cell.UGCListType ugc_list_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ugc_list_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::UGCListType_IsValid(value)) {
            set_ugc_list_type(static_cast< ::Cell::UGCListType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_need_ugc_num;
        break;
      }

      // optional uint32 need_ugc_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_ugc_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_ugc_num_)));
          set_has_need_ugc_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_id;
        break;
      }

      // optional uint32 last_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_id_)));
          set_has_last_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_org_uid;
        break;
      }

      // optional uint32 org_uid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_org_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &org_uid_)));
          set_has_org_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUGCListReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required string session_token = 2;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_token(), output);
  }

  // optional .Cell.UGCListType ugc_list_type = 3;
  if (has_ugc_list_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ugc_list_type(), output);
  }

  // optional uint32 need_ugc_num = 4;
  if (has_need_ugc_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->need_ugc_num(), output);
  }

  // optional uint32 last_id = 5;
  if (has_last_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_id(), output);
  }

  // optional uint32 org_uid = 6;
  if (has_org_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->org_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUGCListReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required string session_token = 2;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_token(), target);
  }

  // optional .Cell.UGCListType ugc_list_type = 3;
  if (has_ugc_list_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ugc_list_type(), target);
  }

  // optional uint32 need_ugc_num = 4;
  if (has_need_ugc_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->need_ugc_num(), target);
  }

  // optional uint32 last_id = 5;
  if (has_last_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_id(), target);
  }

  // optional uint32 org_uid = 6;
  if (has_org_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->org_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUGCListReqMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required string session_token = 2;
    if (has_session_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_token());
    }

    // optional .Cell.UGCListType ugc_list_type = 3;
    if (has_ugc_list_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ugc_list_type());
    }

    // optional uint32 need_ugc_num = 4;
    if (has_need_ugc_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need_ugc_num());
    }

    // optional uint32 last_id = 5;
    if (has_last_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_id());
    }

    // optional uint32 org_uid = 6;
    if (has_org_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->org_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUGCListReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUGCListReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUGCListReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUGCListReqMsg::MergeFrom(const GetUGCListReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_session_token()) {
      set_session_token(from.session_token());
    }
    if (from.has_ugc_list_type()) {
      set_ugc_list_type(from.ugc_list_type());
    }
    if (from.has_need_ugc_num()) {
      set_need_ugc_num(from.need_ugc_num());
    }
    if (from.has_last_id()) {
      set_last_id(from.last_id());
    }
    if (from.has_org_uid()) {
      set_org_uid(from.org_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUGCListReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUGCListReqMsg::CopyFrom(const GetUGCListReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUGCListReqMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetUGCListReqMsg::Swap(GetUGCListReqMsg* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(session_token_, other->session_token_);
    std::swap(ugc_list_type_, other->ugc_list_type_);
    std::swap(need_ugc_num_, other->need_ugc_num_);
    std::swap(last_id_, other->last_id_);
    std::swap(org_uid_, other->org_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUGCListReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUGCListReqMsg_descriptor_;
  metadata.reflection = GetUGCListReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUGCListRespMsg::kRetCodeFieldNumber;
const int GetUGCListRespMsg::kUgcIdListFieldNumber;
#endif  // !_MSC_VER

GetUGCListRespMsg::GetUGCListRespMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUGCListRespMsg::InitAsDefaultInstance() {
}

GetUGCListRespMsg::GetUGCListRespMsg(const GetUGCListRespMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUGCListRespMsg::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUGCListRespMsg::~GetUGCListRespMsg() {
  SharedDtor();
}

void GetUGCListRespMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetUGCListRespMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUGCListRespMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUGCListRespMsg_descriptor_;
}

const GetUGCListRespMsg& GetUGCListRespMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ugc_2eproto();
  return *default_instance_;
}

GetUGCListRespMsg* GetUGCListRespMsg::default_instance_ = NULL;

GetUGCListRespMsg* GetUGCListRespMsg::New() const {
  return new GetUGCListRespMsg;
}

void GetUGCListRespMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
  }
  ugc_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUGCListRespMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Cell.RetCode ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::RetCode_IsValid(value)) {
            set_ret_code(static_cast< ::Cell::RetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ugc_id_list;
        break;
      }

      // repeated .Cell.UGCIdList ugc_id_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ugc_id_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ugc_id_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ugc_id_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUGCListRespMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret_code(), output);
  }

  // repeated .Cell.UGCIdList ugc_id_list = 2;
  for (int i = 0; i < this->ugc_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ugc_id_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUGCListRespMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret_code(), target);
  }

  // repeated .Cell.UGCIdList ugc_id_list = 2;
  for (int i = 0; i < this->ugc_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ugc_id_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUGCListRespMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Cell.RetCode ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret_code());
    }

  }
  // repeated .Cell.UGCIdList ugc_id_list = 2;
  total_size += 1 * this->ugc_id_list_size();
  for (int i = 0; i < this->ugc_id_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ugc_id_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUGCListRespMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUGCListRespMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUGCListRespMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUGCListRespMsg::MergeFrom(const GetUGCListRespMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  ugc_id_list_.MergeFrom(from.ugc_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUGCListRespMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUGCListRespMsg::CopyFrom(const GetUGCListRespMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUGCListRespMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetUGCListRespMsg::Swap(GetUGCListRespMsg* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    ugc_id_list_.Swap(&other->ugc_id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUGCListRespMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUGCListRespMsg_descriptor_;
  metadata.reflection = GetUGCListRespMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddCommentReqMsg::kUidFieldNumber;
const int AddCommentReqMsg::kSessionTokenFieldNumber;
const int AddCommentReqMsg::kUgcIdFieldNumber;
const int AddCommentReqMsg::kMsidFieldNumber;
const int AddCommentReqMsg::kOrgUidFieldNumber;
const int AddCommentReqMsg::kCommentFieldNumber;
#endif  // !_MSC_VER

AddCommentReqMsg::AddCommentReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddCommentReqMsg::InitAsDefaultInstance() {
}

AddCommentReqMsg::AddCommentReqMsg(const AddCommentReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddCommentReqMsg::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  session_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ugc_id_ = GOOGLE_ULONGLONG(0);
  msid_ = GOOGLE_ULONGLONG(0);
  org_uid_ = 0u;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddCommentReqMsg::~AddCommentReqMsg() {
  SharedDtor();
}

void AddCommentReqMsg::SharedDtor() {
  if (session_token_ != &::google::protobuf::internal::kEmptyString) {
    delete session_token_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void AddCommentReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddCommentReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddCommentReqMsg_descriptor_;
}

const AddCommentReqMsg& AddCommentReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ugc_2eproto();
  return *default_instance_;
}

AddCommentReqMsg* AddCommentReqMsg::default_instance_ = NULL;

AddCommentReqMsg* AddCommentReqMsg::New() const {
  return new AddCommentReqMsg;
}

void AddCommentReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_session_token()) {
      if (session_token_ != &::google::protobuf::internal::kEmptyString) {
        session_token_->clear();
      }
    }
    ugc_id_ = GOOGLE_ULONGLONG(0);
    msid_ = GOOGLE_ULONGLONG(0);
    org_uid_ = 0u;
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddCommentReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_token;
        break;
      }

      // required string session_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_token().data(), this->session_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ugc_id;
        break;
      }

      // optional uint64 ugc_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ugc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_id_)));
          set_has_ugc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_msid;
        break;
      }

      // optional uint64 msid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msid_)));
          set_has_msid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_org_uid;
        break;
      }

      // optional uint32 org_uid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_org_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &org_uid_)));
          set_has_org_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_comment;
        break;
      }

      // optional string comment = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddCommentReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required string session_token = 2;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_token(), output);
  }

  // optional uint64 ugc_id = 3;
  if (has_ugc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ugc_id(), output);
  }

  // optional uint64 msid = 4;
  if (has_msid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->msid(), output);
  }

  // optional uint32 org_uid = 5;
  if (has_org_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->org_uid(), output);
  }

  // optional string comment = 6;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->comment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddCommentReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required string session_token = 2;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_token(), target);
  }

  // optional uint64 ugc_id = 3;
  if (has_ugc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ugc_id(), target);
  }

  // optional uint64 msid = 4;
  if (has_msid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->msid(), target);
  }

  // optional uint32 org_uid = 5;
  if (has_org_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->org_uid(), target);
  }

  // optional string comment = 6;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->comment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddCommentReqMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required string session_token = 2;
    if (has_session_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_token());
    }

    // optional uint64 ugc_id = 3;
    if (has_ugc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugc_id());
    }

    // optional uint64 msid = 4;
    if (has_msid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msid());
    }

    // optional uint32 org_uid = 5;
    if (has_org_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->org_uid());
    }

    // optional string comment = 6;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddCommentReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddCommentReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddCommentReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddCommentReqMsg::MergeFrom(const AddCommentReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_session_token()) {
      set_session_token(from.session_token());
    }
    if (from.has_ugc_id()) {
      set_ugc_id(from.ugc_id());
    }
    if (from.has_msid()) {
      set_msid(from.msid());
    }
    if (from.has_org_uid()) {
      set_org_uid(from.org_uid());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddCommentReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCommentReqMsg::CopyFrom(const AddCommentReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCommentReqMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AddCommentReqMsg::Swap(AddCommentReqMsg* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(session_token_, other->session_token_);
    std::swap(ugc_id_, other->ugc_id_);
    std::swap(msid_, other->msid_);
    std::swap(org_uid_, other->org_uid_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddCommentReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddCommentReqMsg_descriptor_;
  metadata.reflection = AddCommentReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddCommentRespMsg::kRetCodeFieldNumber;
const int AddCommentRespMsg::kMcidFieldNumber;
#endif  // !_MSC_VER

AddCommentRespMsg::AddCommentRespMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddCommentRespMsg::InitAsDefaultInstance() {
}

AddCommentRespMsg::AddCommentRespMsg(const AddCommentRespMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddCommentRespMsg::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  mcid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddCommentRespMsg::~AddCommentRespMsg() {
  SharedDtor();
}

void AddCommentRespMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddCommentRespMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddCommentRespMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddCommentRespMsg_descriptor_;
}

const AddCommentRespMsg& AddCommentRespMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ugc_2eproto();
  return *default_instance_;
}

AddCommentRespMsg* AddCommentRespMsg::default_instance_ = NULL;

AddCommentRespMsg* AddCommentRespMsg::New() const {
  return new AddCommentRespMsg;
}

void AddCommentRespMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    mcid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddCommentRespMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Cell.RetCode ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::RetCode_IsValid(value)) {
            set_ret_code(static_cast< ::Cell::RetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mcid;
        break;
      }

      // optional uint64 mcid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddCommentRespMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret_code(), output);
  }

  // optional uint64 mcid = 2;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddCommentRespMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret_code(), target);
  }

  // optional uint64 mcid = 2;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddCommentRespMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Cell.RetCode ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret_code());
    }

    // optional uint64 mcid = 2;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddCommentRespMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddCommentRespMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddCommentRespMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddCommentRespMsg::MergeFrom(const AddCommentRespMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddCommentRespMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCommentRespMsg::CopyFrom(const AddCommentRespMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCommentRespMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddCommentRespMsg::Swap(AddCommentRespMsg* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(mcid_, other->mcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddCommentRespMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddCommentRespMsg_descriptor_;
  metadata.reflection = AddCommentRespMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCommentReqMsg::kUidFieldNumber;
const int GetCommentReqMsg::kSessionTokenFieldNumber;
const int GetCommentReqMsg::kCommentTypeFieldNumber;
const int GetCommentReqMsg::kCidFieldNumber;
const int GetCommentReqMsg::kLastIdFieldNumber;
const int GetCommentReqMsg::kNeedNumFieldNumber;
#endif  // !_MSC_VER

GetCommentReqMsg::GetCommentReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetCommentReqMsg::InitAsDefaultInstance() {
}

GetCommentReqMsg::GetCommentReqMsg(const GetCommentReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetCommentReqMsg::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  session_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_type_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  last_id_ = GOOGLE_ULONGLONG(0);
  need_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCommentReqMsg::~GetCommentReqMsg() {
  SharedDtor();
}

void GetCommentReqMsg::SharedDtor() {
  if (session_token_ != &::google::protobuf::internal::kEmptyString) {
    delete session_token_;
  }
  if (this != default_instance_) {
  }
}

void GetCommentReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCommentReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCommentReqMsg_descriptor_;
}

const GetCommentReqMsg& GetCommentReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ugc_2eproto();
  return *default_instance_;
}

GetCommentReqMsg* GetCommentReqMsg::default_instance_ = NULL;

GetCommentReqMsg* GetCommentReqMsg::New() const {
  return new GetCommentReqMsg;
}

void GetCommentReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_session_token()) {
      if (session_token_ != &::google::protobuf::internal::kEmptyString) {
        session_token_->clear();
      }
    }
    comment_type_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    last_id_ = GOOGLE_ULONGLONG(0);
    need_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCommentReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_token;
        break;
      }

      // required string session_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_token().data(), this->session_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_comment_type;
        break;
      }

      // required .Cell.CommentType comment_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comment_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::CommentType_IsValid(value)) {
            set_comment_type(static_cast< ::Cell::CommentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cid;
        break;
      }

      // required uint64 cid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_id;
        break;
      }

      // optional uint64 last_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_id_)));
          set_has_last_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_need_num;
        break;
      }

      // optional uint32 need_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_num_)));
          set_has_need_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetCommentReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required string session_token = 2;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_token(), output);
  }

  // required .Cell.CommentType comment_type = 3;
  if (has_comment_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->comment_type(), output);
  }

  // required uint64 cid = 4;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->cid(), output);
  }

  // optional uint64 last_id = 5;
  if (has_last_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->last_id(), output);
  }

  // optional uint32 need_num = 6;
  if (has_need_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->need_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetCommentReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required string session_token = 2;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_token(), target);
  }

  // required .Cell.CommentType comment_type = 3;
  if (has_comment_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->comment_type(), target);
  }

  // required uint64 cid = 4;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->cid(), target);
  }

  // optional uint64 last_id = 5;
  if (has_last_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->last_id(), target);
  }

  // optional uint32 need_num = 6;
  if (has_need_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->need_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetCommentReqMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required string session_token = 2;
    if (has_session_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_token());
    }

    // required .Cell.CommentType comment_type = 3;
    if (has_comment_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->comment_type());
    }

    // required uint64 cid = 4;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 last_id = 5;
    if (has_last_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_id());
    }

    // optional uint32 need_num = 6;
    if (has_need_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCommentReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCommentReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCommentReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCommentReqMsg::MergeFrom(const GetCommentReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_session_token()) {
      set_session_token(from.session_token());
    }
    if (from.has_comment_type()) {
      set_comment_type(from.comment_type());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_last_id()) {
      set_last_id(from.last_id());
    }
    if (from.has_need_num()) {
      set_need_num(from.need_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCommentReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCommentReqMsg::CopyFrom(const GetCommentReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCommentReqMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GetCommentReqMsg::Swap(GetCommentReqMsg* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(session_token_, other->session_token_);
    std::swap(comment_type_, other->comment_type_);
    std::swap(cid_, other->cid_);
    std::swap(last_id_, other->last_id_);
    std::swap(need_num_, other->need_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCommentReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCommentReqMsg_descriptor_;
  metadata.reflection = GetCommentReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCommentRespMsg_CommentDetail::kMcidFieldNumber;
const int GetCommentRespMsg_CommentDetail::kUidFieldNumber;
const int GetCommentRespMsg_CommentDetail::kNameFieldNumber;
const int GetCommentRespMsg_CommentDetail::kAvadaUrlFieldNumber;
const int GetCommentRespMsg_CommentDetail::kCommentFieldNumber;
const int GetCommentRespMsg_CommentDetail::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

GetCommentRespMsg_CommentDetail::GetCommentRespMsg_CommentDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetCommentRespMsg_CommentDetail::InitAsDefaultInstance() {
}

GetCommentRespMsg_CommentDetail::GetCommentRespMsg_CommentDetail(const GetCommentRespMsg_CommentDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetCommentRespMsg_CommentDetail::SharedCtor() {
  _cached_size_ = 0;
  mcid_ = GOOGLE_ULONGLONG(0);
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  avada_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  create_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCommentRespMsg_CommentDetail::~GetCommentRespMsg_CommentDetail() {
  SharedDtor();
}

void GetCommentRespMsg_CommentDetail::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (avada_url_ != &::google::protobuf::internal::kEmptyString) {
    delete avada_url_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (create_time_ != &::google::protobuf::internal::kEmptyString) {
    delete create_time_;
  }
  if (this != default_instance_) {
  }
}

void GetCommentRespMsg_CommentDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCommentRespMsg_CommentDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCommentRespMsg_CommentDetail_descriptor_;
}

const GetCommentRespMsg_CommentDetail& GetCommentRespMsg_CommentDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ugc_2eproto();
  return *default_instance_;
}

GetCommentRespMsg_CommentDetail* GetCommentRespMsg_CommentDetail::default_instance_ = NULL;

GetCommentRespMsg_CommentDetail* GetCommentRespMsg_CommentDetail::New() const {
  return new GetCommentRespMsg_CommentDetail;
}

void GetCommentRespMsg_CommentDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mcid_ = GOOGLE_ULONGLONG(0);
    uid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_avada_url()) {
      if (avada_url_ != &::google::protobuf::internal::kEmptyString) {
        avada_url_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    if (has_create_time()) {
      if (create_time_ != &::google::protobuf::internal::kEmptyString) {
        create_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCommentRespMsg_CommentDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mcid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mcid_)));
          set_has_mcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_avada_url;
        break;
      }

      // optional string avada_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avada_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avada_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->avada_url().data(), this->avada_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_comment;
        break;
      }

      // optional string comment = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_create_time;
        break;
      }

      // optional string create_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_create_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->create_time().data(), this->create_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetCommentRespMsg_CommentDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 mcid = 1;
  if (has_mcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mcid(), output);
  }

  // optional uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string avada_url = 4;
  if (has_avada_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avada_url().data(), this->avada_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->avada_url(), output);
  }

  // optional string comment = 5;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->comment(), output);
  }

  // optional string create_time = 6;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->create_time().data(), this->create_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->create_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetCommentRespMsg_CommentDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 mcid = 1;
  if (has_mcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mcid(), target);
  }

  // optional uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string avada_url = 4;
  if (has_avada_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avada_url().data(), this->avada_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->avada_url(), target);
  }

  // optional string comment = 5;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->comment(), target);
  }

  // optional string create_time = 6;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->create_time().data(), this->create_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->create_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetCommentRespMsg_CommentDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 mcid = 1;
    if (has_mcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mcid());
    }

    // optional uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string avada_url = 4;
    if (has_avada_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avada_url());
    }

    // optional string comment = 5;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional string create_time = 6;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->create_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCommentRespMsg_CommentDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCommentRespMsg_CommentDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCommentRespMsg_CommentDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCommentRespMsg_CommentDetail::MergeFrom(const GetCommentRespMsg_CommentDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mcid()) {
      set_mcid(from.mcid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_avada_url()) {
      set_avada_url(from.avada_url());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCommentRespMsg_CommentDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCommentRespMsg_CommentDetail::CopyFrom(const GetCommentRespMsg_CommentDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCommentRespMsg_CommentDetail::IsInitialized() const {

  return true;
}

void GetCommentRespMsg_CommentDetail::Swap(GetCommentRespMsg_CommentDetail* other) {
  if (other != this) {
    std::swap(mcid_, other->mcid_);
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(avada_url_, other->avada_url_);
    std::swap(comment_, other->comment_);
    std::swap(create_time_, other->create_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCommentRespMsg_CommentDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCommentRespMsg_CommentDetail_descriptor_;
  metadata.reflection = GetCommentRespMsg_CommentDetail_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GetCommentRespMsg::kRetCodeFieldNumber;
const int GetCommentRespMsg::kCommentsFieldNumber;
#endif  // !_MSC_VER

GetCommentRespMsg::GetCommentRespMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetCommentRespMsg::InitAsDefaultInstance() {
}

GetCommentRespMsg::GetCommentRespMsg(const GetCommentRespMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetCommentRespMsg::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCommentRespMsg::~GetCommentRespMsg() {
  SharedDtor();
}

void GetCommentRespMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetCommentRespMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCommentRespMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCommentRespMsg_descriptor_;
}

const GetCommentRespMsg& GetCommentRespMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ugc_2eproto();
  return *default_instance_;
}

GetCommentRespMsg* GetCommentRespMsg::default_instance_ = NULL;

GetCommentRespMsg* GetCommentRespMsg::New() const {
  return new GetCommentRespMsg;
}

void GetCommentRespMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
  }
  comments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCommentRespMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Cell.RetCode ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::RetCode_IsValid(value)) {
            set_ret_code(static_cast< ::Cell::RetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_comments;
        break;
      }

      // repeated .Cell.GetCommentRespMsg.CommentDetail comments = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_comments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_comments;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetCommentRespMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret_code(), output);
  }

  // repeated .Cell.GetCommentRespMsg.CommentDetail comments = 2;
  for (int i = 0; i < this->comments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->comments(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetCommentRespMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret_code(), target);
  }

  // repeated .Cell.GetCommentRespMsg.CommentDetail comments = 2;
  for (int i = 0; i < this->comments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->comments(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetCommentRespMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Cell.RetCode ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret_code());
    }

  }
  // repeated .Cell.GetCommentRespMsg.CommentDetail comments = 2;
  total_size += 1 * this->comments_size();
  for (int i = 0; i < this->comments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCommentRespMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCommentRespMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCommentRespMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCommentRespMsg::MergeFrom(const GetCommentRespMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  comments_.MergeFrom(from.comments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCommentRespMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCommentRespMsg::CopyFrom(const GetCommentRespMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCommentRespMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetCommentRespMsg::Swap(GetCommentRespMsg* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    comments_.Swap(&other->comments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCommentRespMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCommentRespMsg_descriptor_;
  metadata.reflection = GetCommentRespMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddCollectionReqMsg::kUidFieldNumber;
const int AddCollectionReqMsg::kSessionTokenFieldNumber;
const int AddCollectionReqMsg::kConfirmTypeFieldNumber;
const int AddCollectionReqMsg::kUgcIdListFieldNumber;
#endif  // !_MSC_VER

AddCollectionReqMsg::AddCollectionReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddCollectionReqMsg::InitAsDefaultInstance() {
  ugc_id_list_ = const_cast< ::Cell::UGCIdList*>(&::Cell::UGCIdList::default_instance());
}

AddCollectionReqMsg::AddCollectionReqMsg(const AddCollectionReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddCollectionReqMsg::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  session_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  confirmtype_ = 1;
  ugc_id_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddCollectionReqMsg::~AddCollectionReqMsg() {
  SharedDtor();
}

void AddCollectionReqMsg::SharedDtor() {
  if (session_token_ != &::google::protobuf::internal::kEmptyString) {
    delete session_token_;
  }
  if (this != default_instance_) {
    delete ugc_id_list_;
  }
}

void AddCollectionReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddCollectionReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddCollectionReqMsg_descriptor_;
}

const AddCollectionReqMsg& AddCollectionReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ugc_2eproto();
  return *default_instance_;
}

AddCollectionReqMsg* AddCollectionReqMsg::default_instance_ = NULL;

AddCollectionReqMsg* AddCollectionReqMsg::New() const {
  return new AddCollectionReqMsg;
}

void AddCollectionReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_session_token()) {
      if (session_token_ != &::google::protobuf::internal::kEmptyString) {
        session_token_->clear();
      }
    }
    confirmtype_ = 1;
    if (has_ugc_id_list()) {
      if (ugc_id_list_ != NULL) ugc_id_list_->::Cell::UGCIdList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddCollectionReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_token;
        break;
      }

      // required string session_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_token().data(), this->session_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_confirmType;
        break;
      }

      // required .Cell.ConfirmType confirmType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_confirmType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::ConfirmType_IsValid(value)) {
            set_confirmtype(static_cast< ::Cell::ConfirmType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ugc_id_list;
        break;
      }

      // required .Cell.UGCIdList ugc_id_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ugc_id_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ugc_id_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddCollectionReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required string session_token = 2;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_token(), output);
  }

  // required .Cell.ConfirmType confirmType = 3;
  if (has_confirmtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->confirmtype(), output);
  }

  // required .Cell.UGCIdList ugc_id_list = 4;
  if (has_ugc_id_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ugc_id_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddCollectionReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required string session_token = 2;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_token(), target);
  }

  // required .Cell.ConfirmType confirmType = 3;
  if (has_confirmtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->confirmtype(), target);
  }

  // required .Cell.UGCIdList ugc_id_list = 4;
  if (has_ugc_id_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ugc_id_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddCollectionReqMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required string session_token = 2;
    if (has_session_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_token());
    }

    // required .Cell.ConfirmType confirmType = 3;
    if (has_confirmtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->confirmtype());
    }

    // required .Cell.UGCIdList ugc_id_list = 4;
    if (has_ugc_id_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ugc_id_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddCollectionReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddCollectionReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddCollectionReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddCollectionReqMsg::MergeFrom(const AddCollectionReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_session_token()) {
      set_session_token(from.session_token());
    }
    if (from.has_confirmtype()) {
      set_confirmtype(from.confirmtype());
    }
    if (from.has_ugc_id_list()) {
      mutable_ugc_id_list()->::Cell::UGCIdList::MergeFrom(from.ugc_id_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddCollectionReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCollectionReqMsg::CopyFrom(const AddCollectionReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCollectionReqMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AddCollectionReqMsg::Swap(AddCollectionReqMsg* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(session_token_, other->session_token_);
    std::swap(confirmtype_, other->confirmtype_);
    std::swap(ugc_id_list_, other->ugc_id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddCollectionReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddCollectionReqMsg_descriptor_;
  metadata.reflection = AddCollectionReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddCollectionRespMsg::kRetCodeFieldNumber;
const int AddCollectionRespMsg::kCltIdFieldNumber;
#endif  // !_MSC_VER

AddCollectionRespMsg::AddCollectionRespMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddCollectionRespMsg::InitAsDefaultInstance() {
}

AddCollectionRespMsg::AddCollectionRespMsg(const AddCollectionRespMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddCollectionRespMsg::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  clt_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddCollectionRespMsg::~AddCollectionRespMsg() {
  SharedDtor();
}

void AddCollectionRespMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddCollectionRespMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddCollectionRespMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddCollectionRespMsg_descriptor_;
}

const AddCollectionRespMsg& AddCollectionRespMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ugc_2eproto();
  return *default_instance_;
}

AddCollectionRespMsg* AddCollectionRespMsg::default_instance_ = NULL;

AddCollectionRespMsg* AddCollectionRespMsg::New() const {
  return new AddCollectionRespMsg;
}

void AddCollectionRespMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    clt_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddCollectionRespMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Cell.RetCode ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::RetCode_IsValid(value)) {
            set_ret_code(static_cast< ::Cell::RetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clt_id;
        break;
      }

      // optional uint64 clt_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clt_id_)));
          set_has_clt_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddCollectionRespMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret_code(), output);
  }

  // optional uint64 clt_id = 2;
  if (has_clt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->clt_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddCollectionRespMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret_code(), target);
  }

  // optional uint64 clt_id = 2;
  if (has_clt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->clt_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddCollectionRespMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Cell.RetCode ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret_code());
    }

    // optional uint64 clt_id = 2;
    if (has_clt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clt_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddCollectionRespMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddCollectionRespMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddCollectionRespMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddCollectionRespMsg::MergeFrom(const AddCollectionRespMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_clt_id()) {
      set_clt_id(from.clt_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddCollectionRespMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCollectionRespMsg::CopyFrom(const AddCollectionRespMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCollectionRespMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddCollectionRespMsg::Swap(AddCollectionRespMsg* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(clt_id_, other->clt_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddCollectionRespMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddCollectionRespMsg_descriptor_;
  metadata.reflection = AddCollectionRespMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayCardReqMsg::kUidFieldNumber;
const int PlayCardReqMsg::kSessionTokenFieldNumber;
const int PlayCardReqMsg::kGeoFieldNumber;
const int PlayCardReqMsg::kCoinFieldNumber;
#endif  // !_MSC_VER

PlayCardReqMsg::PlayCardReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayCardReqMsg::InitAsDefaultInstance() {
  geo_ = const_cast< ::Cell::Geo*>(&::Cell::Geo::default_instance());
}

PlayCardReqMsg::PlayCardReqMsg(const PlayCardReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayCardReqMsg::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  session_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  geo_ = NULL;
  coin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayCardReqMsg::~PlayCardReqMsg() {
  SharedDtor();
}

void PlayCardReqMsg::SharedDtor() {
  if (session_token_ != &::google::protobuf::internal::kEmptyString) {
    delete session_token_;
  }
  if (this != default_instance_) {
    delete geo_;
  }
}

void PlayCardReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayCardReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayCardReqMsg_descriptor_;
}

const PlayCardReqMsg& PlayCardReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ugc_2eproto();
  return *default_instance_;
}

PlayCardReqMsg* PlayCardReqMsg::default_instance_ = NULL;

PlayCardReqMsg* PlayCardReqMsg::New() const {
  return new PlayCardReqMsg;
}

void PlayCardReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_session_token()) {
      if (session_token_ != &::google::protobuf::internal::kEmptyString) {
        session_token_->clear();
      }
    }
    if (has_geo()) {
      if (geo_ != NULL) geo_->::Cell::Geo::Clear();
    }
    coin_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayCardReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_token;
        break;
      }

      // required string session_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_token().data(), this->session_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_geo;
        break;
      }

      // optional .Cell.Geo geo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_coin;
        break;
      }

      // optional int32 coin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayCardReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required string session_token = 2;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_token(), output);
  }

  // optional .Cell.Geo geo = 3;
  if (has_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->geo(), output);
  }

  // optional int32 coin = 4;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->coin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayCardReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required string session_token = 2;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_token(), target);
  }

  // optional .Cell.Geo geo = 3;
  if (has_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->geo(), target);
  }

  // optional int32 coin = 4;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->coin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayCardReqMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required string session_token = 2;
    if (has_session_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_token());
    }

    // optional .Cell.Geo geo = 3;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo());
    }

    // optional int32 coin = 4;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayCardReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayCardReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayCardReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayCardReqMsg::MergeFrom(const PlayCardReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_session_token()) {
      set_session_token(from.session_token());
    }
    if (from.has_geo()) {
      mutable_geo()->::Cell::Geo::MergeFrom(from.geo());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayCardReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayCardReqMsg::CopyFrom(const PlayCardReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayCardReqMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_geo()) {
    if (!this->geo().IsInitialized()) return false;
  }
  return true;
}

void PlayCardReqMsg::Swap(PlayCardReqMsg* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(session_token_, other->session_token_);
    std::swap(geo_, other->geo_);
    std::swap(coin_, other->coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayCardReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayCardReqMsg_descriptor_;
  metadata.reflection = PlayCardReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayCardRespMsg::kRetCodeFieldNumber;
#endif  // !_MSC_VER

PlayCardRespMsg::PlayCardRespMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayCardRespMsg::InitAsDefaultInstance() {
}

PlayCardRespMsg::PlayCardRespMsg(const PlayCardRespMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayCardRespMsg::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayCardRespMsg::~PlayCardRespMsg() {
  SharedDtor();
}

void PlayCardRespMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayCardRespMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayCardRespMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayCardRespMsg_descriptor_;
}

const PlayCardRespMsg& PlayCardRespMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ugc_2eproto();
  return *default_instance_;
}

PlayCardRespMsg* PlayCardRespMsg::default_instance_ = NULL;

PlayCardRespMsg* PlayCardRespMsg::New() const {
  return new PlayCardRespMsg;
}

void PlayCardRespMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayCardRespMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Cell.RetCode ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::RetCode_IsValid(value)) {
            set_ret_code(static_cast< ::Cell::RetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayCardRespMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayCardRespMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayCardRespMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Cell.RetCode ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayCardRespMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayCardRespMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayCardRespMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayCardRespMsg::MergeFrom(const PlayCardRespMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayCardRespMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayCardRespMsg::CopyFrom(const PlayCardRespMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayCardRespMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayCardRespMsg::Swap(PlayCardRespMsg* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayCardRespMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayCardRespMsg_descriptor_;
  metadata.reflection = PlayCardRespMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cell

// @@protoc_insertion_point(global_scope)
