// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: account.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "account.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cell {

namespace {

const ::google::protobuf::Descriptor* GetUserProfileReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserProfileReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserProfileRespMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserProfileRespMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserAchieveRespMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserAchieveRespMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetUserProfileReqMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetUserProfileReqMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetUserProfileRespMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetUserProfileRespMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_account_2eproto() {
  protobuf_AddDesc_account_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "account.proto");
  GOOGLE_CHECK(file != NULL);
  GetUserProfileReqMsg_descriptor_ = file->message_type(0);
  static const int GetUserProfileReqMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileReqMsg, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileReqMsg, session_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileReqMsg, usr_prf_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileReqMsg, org_uid_),
  };
  GetUserProfileReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserProfileReqMsg_descriptor_,
      GetUserProfileReqMsg::default_instance_,
      GetUserProfileReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserProfileReqMsg));
  GetUserProfileRespMsg_descriptor_ = file->message_type(1);
  static const int GetUserProfileRespMsg_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileRespMsg, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileRespMsg, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileRespMsg, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileRespMsg, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileRespMsg, birthday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileRespMsg, avada_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileRespMsg, usr_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileRespMsg, avada_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileRespMsg, blood_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileRespMsg, constellation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileRespMsg, zodiac_),
  };
  GetUserProfileRespMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserProfileRespMsg_descriptor_,
      GetUserProfileRespMsg::default_instance_,
      GetUserProfileRespMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileRespMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileRespMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserProfileRespMsg));
  GetUserAchieveRespMsg_descriptor_ = file->message_type(2);
  static const int GetUserAchieveRespMsg_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserAchieveRespMsg, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserAchieveRespMsg, create_ugc_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserAchieveRespMsg, post_ugc_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserAchieveRespMsg, pass_ugc_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserAchieveRespMsg, total_post_dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserAchieveRespMsg, max_post_dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserAchieveRespMsg, ugc_seed_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserAchieveRespMsg, pk_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserAchieveRespMsg, pk_win_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserAchieveRespMsg, pk_lose_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserAchieveRespMsg, pk_rank_),
  };
  GetUserAchieveRespMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserAchieveRespMsg_descriptor_,
      GetUserAchieveRespMsg::default_instance_,
      GetUserAchieveRespMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserAchieveRespMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserAchieveRespMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserAchieveRespMsg));
  SetUserProfileReqMsg_descriptor_ = file->message_type(3);
  static const int SetUserProfileReqMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserProfileReqMsg, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserProfileReqMsg, session_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserProfileReqMsg, avada_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserProfileReqMsg, usr_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserProfileReqMsg, avada_size_),
  };
  SetUserProfileReqMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetUserProfileReqMsg_descriptor_,
      SetUserProfileReqMsg::default_instance_,
      SetUserProfileReqMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserProfileReqMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserProfileReqMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetUserProfileReqMsg));
  SetUserProfileRespMsg_descriptor_ = file->message_type(4);
  static const int SetUserProfileRespMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserProfileRespMsg, ret_code_),
  };
  SetUserProfileRespMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetUserProfileRespMsg_descriptor_,
      SetUserProfileRespMsg::default_instance_,
      SetUserProfileRespMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserProfileRespMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUserProfileRespMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetUserProfileRespMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_account_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserProfileReqMsg_descriptor_, &GetUserProfileReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserProfileRespMsg_descriptor_, &GetUserProfileRespMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserAchieveRespMsg_descriptor_, &GetUserAchieveRespMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetUserProfileReqMsg_descriptor_, &SetUserProfileReqMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetUserProfileRespMsg_descriptor_, &SetUserProfileRespMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_account_2eproto() {
  delete GetUserProfileReqMsg::default_instance_;
  delete GetUserProfileReqMsg_reflection_;
  delete GetUserProfileRespMsg::default_instance_;
  delete GetUserProfileRespMsg_reflection_;
  delete GetUserAchieveRespMsg::default_instance_;
  delete GetUserAchieveRespMsg_reflection_;
  delete SetUserProfileReqMsg::default_instance_;
  delete SetUserProfileReqMsg_reflection_;
  delete SetUserProfileRespMsg::default_instance_;
  delete SetUserProfileRespMsg_reflection_;
}

void protobuf_AddDesc_account_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cell::protobuf_AddDesc_common_5fdata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\raccount.proto\022\004Cell\032\021common_data.proto"
    "\"x\n\024GetUserProfileReqMsg\022\013\n\003uid\030\001 \001(\r\022\025\n"
    "\rsession_token\030\002 \001(\t\022+\n\014usr_prf_type\030\003 \001"
    "(\0162\025.Cell.UserProfileType\022\017\n\007org_uid\030\004 \001"
    "(\r\"\266\002\n\025GetUserProfileRespMsg\022\037\n\010ret_code"
    "\030\001 \002(\0162\r.Cell.RetCode\022\r\n\005phone\030\002 \001(\t\022\r\n\005"
    "email\030\003 \001(\t\022\034\n\006gender\030\004 \001(\0162\014.Cell.Gende"
    "r\022\020\n\010birthday\030\005 \001(\t\022\021\n\tavada_url\030\006 \001(\t\022\020"
    "\n\010usr_name\030\007 \001(\t\022\022\n\navada_size\030\010 \001(\t\022#\n\n"
    "blood_type\030\t \001(\0162\017.Cell.BloodType\022.\n\rcon"
    "stellation\030\n \001(\0162\027.Cell.ConstellationTyp"
    "e\022 \n\006zodiac\030\013 \001(\0162\020.Cell.ZodiacType\"\215\002\n\025"
    "GetUserAchieveRespMsg\022\037\n\010ret_code\030\001 \002(\0162"
    "\r.Cell.RetCode\022\026\n\016create_ugc_num\030\002 \001(\r\022\024"
    "\n\014post_ugc_num\030\003 \001(\r\022\024\n\014pass_ugc_num\030\004 \001"
    "(\r\022\027\n\017total_post_dist\030\005 \001(\r\022\025\n\rmax_post_"
    "dist\030\006 \001(\r\022\024\n\014ugc_seed_num\030\007 \001(\r\022\017\n\007pk_c"
    "oin\030\010 \001(\003\022\022\n\npk_win_num\030\t \001(\r\022\023\n\013pk_lose"
    "_num\030\n \001(\r\022\017\n\007pk_rank\030\013 \001(\r\"s\n\024SetUserPr"
    "ofileReqMsg\022\013\n\003uid\030\001 \001(\r\022\025\n\rsession_toke"
    "n\030\002 \001(\t\022\021\n\tavada_url\030\003 \001(\t\022\020\n\010usr_name\030\004"
    " \001(\t\022\022\n\navada_size\030\005 \001(\t\"8\n\025SetUserProfi"
    "leRespMsg\022\037\n\010ret_code\030\001 \002(\0162\r.Cell.RetCo"
    "de", 922);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "account.proto", &protobuf_RegisterTypes);
  GetUserProfileReqMsg::default_instance_ = new GetUserProfileReqMsg();
  GetUserProfileRespMsg::default_instance_ = new GetUserProfileRespMsg();
  GetUserAchieveRespMsg::default_instance_ = new GetUserAchieveRespMsg();
  SetUserProfileReqMsg::default_instance_ = new SetUserProfileReqMsg();
  SetUserProfileRespMsg::default_instance_ = new SetUserProfileRespMsg();
  GetUserProfileReqMsg::default_instance_->InitAsDefaultInstance();
  GetUserProfileRespMsg::default_instance_->InitAsDefaultInstance();
  GetUserAchieveRespMsg::default_instance_->InitAsDefaultInstance();
  SetUserProfileReqMsg::default_instance_->InitAsDefaultInstance();
  SetUserProfileRespMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_account_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_account_2eproto {
  StaticDescriptorInitializer_account_2eproto() {
    protobuf_AddDesc_account_2eproto();
  }
} static_descriptor_initializer_account_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GetUserProfileReqMsg::kUidFieldNumber;
const int GetUserProfileReqMsg::kSessionTokenFieldNumber;
const int GetUserProfileReqMsg::kUsrPrfTypeFieldNumber;
const int GetUserProfileReqMsg::kOrgUidFieldNumber;
#endif  // !_MSC_VER

GetUserProfileReqMsg::GetUserProfileReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUserProfileReqMsg::InitAsDefaultInstance() {
}

GetUserProfileReqMsg::GetUserProfileReqMsg(const GetUserProfileReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUserProfileReqMsg::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  session_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usr_prf_type_ = 0;
  org_uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserProfileReqMsg::~GetUserProfileReqMsg() {
  SharedDtor();
}

void GetUserProfileReqMsg::SharedDtor() {
  if (session_token_ != &::google::protobuf::internal::kEmptyString) {
    delete session_token_;
  }
  if (this != default_instance_) {
  }
}

void GetUserProfileReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserProfileReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserProfileReqMsg_descriptor_;
}

const GetUserProfileReqMsg& GetUserProfileReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

GetUserProfileReqMsg* GetUserProfileReqMsg::default_instance_ = NULL;

GetUserProfileReqMsg* GetUserProfileReqMsg::New() const {
  return new GetUserProfileReqMsg;
}

void GetUserProfileReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_session_token()) {
      if (session_token_ != &::google::protobuf::internal::kEmptyString) {
        session_token_->clear();
      }
    }
    usr_prf_type_ = 0;
    org_uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserProfileReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_token;
        break;
      }

      // optional string session_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_token().data(), this->session_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usr_prf_type;
        break;
      }

      // optional .Cell.UserProfileType usr_prf_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usr_prf_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::UserProfileType_IsValid(value)) {
            set_usr_prf_type(static_cast< ::Cell::UserProfileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_org_uid;
        break;
      }

      // optional uint32 org_uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_org_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &org_uid_)));
          set_has_org_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUserProfileReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional string session_token = 2;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_token(), output);
  }

  // optional .Cell.UserProfileType usr_prf_type = 3;
  if (has_usr_prf_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->usr_prf_type(), output);
  }

  // optional uint32 org_uid = 4;
  if (has_org_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->org_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUserProfileReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional string session_token = 2;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_token(), target);
  }

  // optional .Cell.UserProfileType usr_prf_type = 3;
  if (has_usr_prf_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->usr_prf_type(), target);
  }

  // optional uint32 org_uid = 4;
  if (has_org_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->org_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUserProfileReqMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional string session_token = 2;
    if (has_session_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_token());
    }

    // optional .Cell.UserProfileType usr_prf_type = 3;
    if (has_usr_prf_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->usr_prf_type());
    }

    // optional uint32 org_uid = 4;
    if (has_org_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->org_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserProfileReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserProfileReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserProfileReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserProfileReqMsg::MergeFrom(const GetUserProfileReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_session_token()) {
      set_session_token(from.session_token());
    }
    if (from.has_usr_prf_type()) {
      set_usr_prf_type(from.usr_prf_type());
    }
    if (from.has_org_uid()) {
      set_org_uid(from.org_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserProfileReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserProfileReqMsg::CopyFrom(const GetUserProfileReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserProfileReqMsg::IsInitialized() const {

  return true;
}

void GetUserProfileReqMsg::Swap(GetUserProfileReqMsg* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(session_token_, other->session_token_);
    std::swap(usr_prf_type_, other->usr_prf_type_);
    std::swap(org_uid_, other->org_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserProfileReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserProfileReqMsg_descriptor_;
  metadata.reflection = GetUserProfileReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserProfileRespMsg::kRetCodeFieldNumber;
const int GetUserProfileRespMsg::kPhoneFieldNumber;
const int GetUserProfileRespMsg::kEmailFieldNumber;
const int GetUserProfileRespMsg::kGenderFieldNumber;
const int GetUserProfileRespMsg::kBirthdayFieldNumber;
const int GetUserProfileRespMsg::kAvadaUrlFieldNumber;
const int GetUserProfileRespMsg::kUsrNameFieldNumber;
const int GetUserProfileRespMsg::kAvadaSizeFieldNumber;
const int GetUserProfileRespMsg::kBloodTypeFieldNumber;
const int GetUserProfileRespMsg::kConstellationFieldNumber;
const int GetUserProfileRespMsg::kZodiacFieldNumber;
#endif  // !_MSC_VER

GetUserProfileRespMsg::GetUserProfileRespMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUserProfileRespMsg::InitAsDefaultInstance() {
}

GetUserProfileRespMsg::GetUserProfileRespMsg(const GetUserProfileRespMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUserProfileRespMsg::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_ = 0;
  birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  avada_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  avada_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  blood_type_ = 1;
  constellation_ = 1;
  zodiac_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserProfileRespMsg::~GetUserProfileRespMsg() {
  SharedDtor();
}

void GetUserProfileRespMsg::SharedDtor() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    delete birthday_;
  }
  if (avada_url_ != &::google::protobuf::internal::kEmptyString) {
    delete avada_url_;
  }
  if (usr_name_ != &::google::protobuf::internal::kEmptyString) {
    delete usr_name_;
  }
  if (avada_size_ != &::google::protobuf::internal::kEmptyString) {
    delete avada_size_;
  }
  if (this != default_instance_) {
  }
}

void GetUserProfileRespMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserProfileRespMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserProfileRespMsg_descriptor_;
}

const GetUserProfileRespMsg& GetUserProfileRespMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

GetUserProfileRespMsg* GetUserProfileRespMsg::default_instance_ = NULL;

GetUserProfileRespMsg* GetUserProfileRespMsg::New() const {
  return new GetUserProfileRespMsg;
}

void GetUserProfileRespMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    gender_ = 0;
    if (has_birthday()) {
      if (birthday_ != &::google::protobuf::internal::kEmptyString) {
        birthday_->clear();
      }
    }
    if (has_avada_url()) {
      if (avada_url_ != &::google::protobuf::internal::kEmptyString) {
        avada_url_->clear();
      }
    }
    if (has_usr_name()) {
      if (usr_name_ != &::google::protobuf::internal::kEmptyString) {
        usr_name_->clear();
      }
    }
    if (has_avada_size()) {
      if (avada_size_ != &::google::protobuf::internal::kEmptyString) {
        avada_size_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    blood_type_ = 1;
    constellation_ = 1;
    zodiac_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserProfileRespMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Cell.RetCode ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::RetCode_IsValid(value)) {
            set_ret_code(static_cast< ::Cell::RetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_phone;
        break;
      }

      // optional string phone = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_email;
        break;
      }

      // optional string email = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }

      // optional .Cell.Gender gender = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::Gender_IsValid(value)) {
            set_gender(static_cast< ::Cell::Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_birthday;
        break;
      }

      // optional string birthday = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_birthday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_birthday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->birthday().data(), this->birthday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_avada_url;
        break;
      }

      // optional string avada_url = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avada_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avada_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->avada_url().data(), this->avada_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_usr_name;
        break;
      }

      // optional string usr_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usr_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usr_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usr_name().data(), this->usr_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_avada_size;
        break;
      }

      // optional string avada_size = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avada_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avada_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->avada_size().data(), this->avada_size().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_blood_type;
        break;
      }

      // optional .Cell.BloodType blood_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::BloodType_IsValid(value)) {
            set_blood_type(static_cast< ::Cell::BloodType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_constellation;
        break;
      }

      // optional .Cell.ConstellationType constellation = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_constellation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::ConstellationType_IsValid(value)) {
            set_constellation(static_cast< ::Cell::ConstellationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_zodiac;
        break;
      }

      // optional .Cell.ZodiacType zodiac = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zodiac:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::ZodiacType_IsValid(value)) {
            set_zodiac(static_cast< ::Cell::ZodiacType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUserProfileRespMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret_code(), output);
  }

  // optional string phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->phone(), output);
  }

  // optional string email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->email(), output);
  }

  // optional .Cell.Gender gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->gender(), output);
  }

  // optional string birthday = 5;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->birthday(), output);
  }

  // optional string avada_url = 6;
  if (has_avada_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avada_url().data(), this->avada_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->avada_url(), output);
  }

  // optional string usr_name = 7;
  if (has_usr_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usr_name().data(), this->usr_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->usr_name(), output);
  }

  // optional string avada_size = 8;
  if (has_avada_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avada_size().data(), this->avada_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->avada_size(), output);
  }

  // optional .Cell.BloodType blood_type = 9;
  if (has_blood_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->blood_type(), output);
  }

  // optional .Cell.ConstellationType constellation = 10;
  if (has_constellation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->constellation(), output);
  }

  // optional .Cell.ZodiacType zodiac = 11;
  if (has_zodiac()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->zodiac(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUserProfileRespMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret_code(), target);
  }

  // optional string phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phone(), target);
  }

  // optional string email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->email(), target);
  }

  // optional .Cell.Gender gender = 4;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->gender(), target);
  }

  // optional string birthday = 5;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->birthday(), target);
  }

  // optional string avada_url = 6;
  if (has_avada_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avada_url().data(), this->avada_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->avada_url(), target);
  }

  // optional string usr_name = 7;
  if (has_usr_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usr_name().data(), this->usr_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->usr_name(), target);
  }

  // optional string avada_size = 8;
  if (has_avada_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avada_size().data(), this->avada_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->avada_size(), target);
  }

  // optional .Cell.BloodType blood_type = 9;
  if (has_blood_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->blood_type(), target);
  }

  // optional .Cell.ConstellationType constellation = 10;
  if (has_constellation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->constellation(), target);
  }

  // optional .Cell.ZodiacType zodiac = 11;
  if (has_zodiac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->zodiac(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUserProfileRespMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Cell.RetCode ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret_code());
    }

    // optional string phone = 2;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional string email = 3;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional .Cell.Gender gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional string birthday = 5;
    if (has_birthday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->birthday());
    }

    // optional string avada_url = 6;
    if (has_avada_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avada_url());
    }

    // optional string usr_name = 7;
    if (has_usr_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usr_name());
    }

    // optional string avada_size = 8;
    if (has_avada_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avada_size());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Cell.BloodType blood_type = 9;
    if (has_blood_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->blood_type());
    }

    // optional .Cell.ConstellationType constellation = 10;
    if (has_constellation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->constellation());
    }

    // optional .Cell.ZodiacType zodiac = 11;
    if (has_zodiac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->zodiac());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserProfileRespMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserProfileRespMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserProfileRespMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserProfileRespMsg::MergeFrom(const GetUserProfileRespMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_birthday()) {
      set_birthday(from.birthday());
    }
    if (from.has_avada_url()) {
      set_avada_url(from.avada_url());
    }
    if (from.has_usr_name()) {
      set_usr_name(from.usr_name());
    }
    if (from.has_avada_size()) {
      set_avada_size(from.avada_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_blood_type()) {
      set_blood_type(from.blood_type());
    }
    if (from.has_constellation()) {
      set_constellation(from.constellation());
    }
    if (from.has_zodiac()) {
      set_zodiac(from.zodiac());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserProfileRespMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserProfileRespMsg::CopyFrom(const GetUserProfileRespMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserProfileRespMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetUserProfileRespMsg::Swap(GetUserProfileRespMsg* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(phone_, other->phone_);
    std::swap(email_, other->email_);
    std::swap(gender_, other->gender_);
    std::swap(birthday_, other->birthday_);
    std::swap(avada_url_, other->avada_url_);
    std::swap(usr_name_, other->usr_name_);
    std::swap(avada_size_, other->avada_size_);
    std::swap(blood_type_, other->blood_type_);
    std::swap(constellation_, other->constellation_);
    std::swap(zodiac_, other->zodiac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserProfileRespMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserProfileRespMsg_descriptor_;
  metadata.reflection = GetUserProfileRespMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserAchieveRespMsg::kRetCodeFieldNumber;
const int GetUserAchieveRespMsg::kCreateUgcNumFieldNumber;
const int GetUserAchieveRespMsg::kPostUgcNumFieldNumber;
const int GetUserAchieveRespMsg::kPassUgcNumFieldNumber;
const int GetUserAchieveRespMsg::kTotalPostDistFieldNumber;
const int GetUserAchieveRespMsg::kMaxPostDistFieldNumber;
const int GetUserAchieveRespMsg::kUgcSeedNumFieldNumber;
const int GetUserAchieveRespMsg::kPkCoinFieldNumber;
const int GetUserAchieveRespMsg::kPkWinNumFieldNumber;
const int GetUserAchieveRespMsg::kPkLoseNumFieldNumber;
const int GetUserAchieveRespMsg::kPkRankFieldNumber;
#endif  // !_MSC_VER

GetUserAchieveRespMsg::GetUserAchieveRespMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUserAchieveRespMsg::InitAsDefaultInstance() {
}

GetUserAchieveRespMsg::GetUserAchieveRespMsg(const GetUserAchieveRespMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUserAchieveRespMsg::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  create_ugc_num_ = 0u;
  post_ugc_num_ = 0u;
  pass_ugc_num_ = 0u;
  total_post_dist_ = 0u;
  max_post_dist_ = 0u;
  ugc_seed_num_ = 0u;
  pk_coin_ = GOOGLE_LONGLONG(0);
  pk_win_num_ = 0u;
  pk_lose_num_ = 0u;
  pk_rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserAchieveRespMsg::~GetUserAchieveRespMsg() {
  SharedDtor();
}

void GetUserAchieveRespMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetUserAchieveRespMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserAchieveRespMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserAchieveRespMsg_descriptor_;
}

const GetUserAchieveRespMsg& GetUserAchieveRespMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

GetUserAchieveRespMsg* GetUserAchieveRespMsg::default_instance_ = NULL;

GetUserAchieveRespMsg* GetUserAchieveRespMsg::New() const {
  return new GetUserAchieveRespMsg;
}

void GetUserAchieveRespMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    create_ugc_num_ = 0u;
    post_ugc_num_ = 0u;
    pass_ugc_num_ = 0u;
    total_post_dist_ = 0u;
    max_post_dist_ = 0u;
    ugc_seed_num_ = 0u;
    pk_coin_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pk_win_num_ = 0u;
    pk_lose_num_ = 0u;
    pk_rank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserAchieveRespMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Cell.RetCode ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::RetCode_IsValid(value)) {
            set_ret_code(static_cast< ::Cell::RetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_create_ugc_num;
        break;
      }

      // optional uint32 create_ugc_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_ugc_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_ugc_num_)));
          set_has_create_ugc_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_post_ugc_num;
        break;
      }

      // optional uint32 post_ugc_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_post_ugc_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &post_ugc_num_)));
          set_has_post_ugc_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pass_ugc_num;
        break;
      }

      // optional uint32 pass_ugc_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_ugc_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pass_ugc_num_)));
          set_has_pass_ugc_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_total_post_dist;
        break;
      }

      // optional uint32 total_post_dist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_post_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_post_dist_)));
          set_has_total_post_dist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_post_dist;
        break;
      }

      // optional uint32 max_post_dist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_post_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_post_dist_)));
          set_has_max_post_dist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ugc_seed_num;
        break;
      }

      // optional uint32 ugc_seed_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ugc_seed_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ugc_seed_num_)));
          set_has_ugc_seed_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pk_coin;
        break;
      }

      // optional int64 pk_coin = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pk_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pk_coin_)));
          set_has_pk_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pk_win_num;
        break;
      }

      // optional uint32 pk_win_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pk_win_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pk_win_num_)));
          set_has_pk_win_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pk_lose_num;
        break;
      }

      // optional uint32 pk_lose_num = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pk_lose_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pk_lose_num_)));
          set_has_pk_lose_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_pk_rank;
        break;
      }

      // optional uint32 pk_rank = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pk_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pk_rank_)));
          set_has_pk_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUserAchieveRespMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret_code(), output);
  }

  // optional uint32 create_ugc_num = 2;
  if (has_create_ugc_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->create_ugc_num(), output);
  }

  // optional uint32 post_ugc_num = 3;
  if (has_post_ugc_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->post_ugc_num(), output);
  }

  // optional uint32 pass_ugc_num = 4;
  if (has_pass_ugc_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pass_ugc_num(), output);
  }

  // optional uint32 total_post_dist = 5;
  if (has_total_post_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->total_post_dist(), output);
  }

  // optional uint32 max_post_dist = 6;
  if (has_max_post_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_post_dist(), output);
  }

  // optional uint32 ugc_seed_num = 7;
  if (has_ugc_seed_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ugc_seed_num(), output);
  }

  // optional int64 pk_coin = 8;
  if (has_pk_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->pk_coin(), output);
  }

  // optional uint32 pk_win_num = 9;
  if (has_pk_win_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pk_win_num(), output);
  }

  // optional uint32 pk_lose_num = 10;
  if (has_pk_lose_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pk_lose_num(), output);
  }

  // optional uint32 pk_rank = 11;
  if (has_pk_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->pk_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUserAchieveRespMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret_code(), target);
  }

  // optional uint32 create_ugc_num = 2;
  if (has_create_ugc_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->create_ugc_num(), target);
  }

  // optional uint32 post_ugc_num = 3;
  if (has_post_ugc_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->post_ugc_num(), target);
  }

  // optional uint32 pass_ugc_num = 4;
  if (has_pass_ugc_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pass_ugc_num(), target);
  }

  // optional uint32 total_post_dist = 5;
  if (has_total_post_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->total_post_dist(), target);
  }

  // optional uint32 max_post_dist = 6;
  if (has_max_post_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_post_dist(), target);
  }

  // optional uint32 ugc_seed_num = 7;
  if (has_ugc_seed_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ugc_seed_num(), target);
  }

  // optional int64 pk_coin = 8;
  if (has_pk_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->pk_coin(), target);
  }

  // optional uint32 pk_win_num = 9;
  if (has_pk_win_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pk_win_num(), target);
  }

  // optional uint32 pk_lose_num = 10;
  if (has_pk_lose_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pk_lose_num(), target);
  }

  // optional uint32 pk_rank = 11;
  if (has_pk_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->pk_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUserAchieveRespMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Cell.RetCode ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret_code());
    }

    // optional uint32 create_ugc_num = 2;
    if (has_create_ugc_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_ugc_num());
    }

    // optional uint32 post_ugc_num = 3;
    if (has_post_ugc_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->post_ugc_num());
    }

    // optional uint32 pass_ugc_num = 4;
    if (has_pass_ugc_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pass_ugc_num());
    }

    // optional uint32 total_post_dist = 5;
    if (has_total_post_dist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_post_dist());
    }

    // optional uint32 max_post_dist = 6;
    if (has_max_post_dist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_post_dist());
    }

    // optional uint32 ugc_seed_num = 7;
    if (has_ugc_seed_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ugc_seed_num());
    }

    // optional int64 pk_coin = 8;
    if (has_pk_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pk_coin());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 pk_win_num = 9;
    if (has_pk_win_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pk_win_num());
    }

    // optional uint32 pk_lose_num = 10;
    if (has_pk_lose_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pk_lose_num());
    }

    // optional uint32 pk_rank = 11;
    if (has_pk_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pk_rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserAchieveRespMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserAchieveRespMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserAchieveRespMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserAchieveRespMsg::MergeFrom(const GetUserAchieveRespMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_create_ugc_num()) {
      set_create_ugc_num(from.create_ugc_num());
    }
    if (from.has_post_ugc_num()) {
      set_post_ugc_num(from.post_ugc_num());
    }
    if (from.has_pass_ugc_num()) {
      set_pass_ugc_num(from.pass_ugc_num());
    }
    if (from.has_total_post_dist()) {
      set_total_post_dist(from.total_post_dist());
    }
    if (from.has_max_post_dist()) {
      set_max_post_dist(from.max_post_dist());
    }
    if (from.has_ugc_seed_num()) {
      set_ugc_seed_num(from.ugc_seed_num());
    }
    if (from.has_pk_coin()) {
      set_pk_coin(from.pk_coin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pk_win_num()) {
      set_pk_win_num(from.pk_win_num());
    }
    if (from.has_pk_lose_num()) {
      set_pk_lose_num(from.pk_lose_num());
    }
    if (from.has_pk_rank()) {
      set_pk_rank(from.pk_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserAchieveRespMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserAchieveRespMsg::CopyFrom(const GetUserAchieveRespMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserAchieveRespMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetUserAchieveRespMsg::Swap(GetUserAchieveRespMsg* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(create_ugc_num_, other->create_ugc_num_);
    std::swap(post_ugc_num_, other->post_ugc_num_);
    std::swap(pass_ugc_num_, other->pass_ugc_num_);
    std::swap(total_post_dist_, other->total_post_dist_);
    std::swap(max_post_dist_, other->max_post_dist_);
    std::swap(ugc_seed_num_, other->ugc_seed_num_);
    std::swap(pk_coin_, other->pk_coin_);
    std::swap(pk_win_num_, other->pk_win_num_);
    std::swap(pk_lose_num_, other->pk_lose_num_);
    std::swap(pk_rank_, other->pk_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserAchieveRespMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserAchieveRespMsg_descriptor_;
  metadata.reflection = GetUserAchieveRespMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetUserProfileReqMsg::kUidFieldNumber;
const int SetUserProfileReqMsg::kSessionTokenFieldNumber;
const int SetUserProfileReqMsg::kAvadaUrlFieldNumber;
const int SetUserProfileReqMsg::kUsrNameFieldNumber;
const int SetUserProfileReqMsg::kAvadaSizeFieldNumber;
#endif  // !_MSC_VER

SetUserProfileReqMsg::SetUserProfileReqMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetUserProfileReqMsg::InitAsDefaultInstance() {
}

SetUserProfileReqMsg::SetUserProfileReqMsg(const SetUserProfileReqMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetUserProfileReqMsg::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  session_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  avada_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  avada_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetUserProfileReqMsg::~SetUserProfileReqMsg() {
  SharedDtor();
}

void SetUserProfileReqMsg::SharedDtor() {
  if (session_token_ != &::google::protobuf::internal::kEmptyString) {
    delete session_token_;
  }
  if (avada_url_ != &::google::protobuf::internal::kEmptyString) {
    delete avada_url_;
  }
  if (usr_name_ != &::google::protobuf::internal::kEmptyString) {
    delete usr_name_;
  }
  if (avada_size_ != &::google::protobuf::internal::kEmptyString) {
    delete avada_size_;
  }
  if (this != default_instance_) {
  }
}

void SetUserProfileReqMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetUserProfileReqMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetUserProfileReqMsg_descriptor_;
}

const SetUserProfileReqMsg& SetUserProfileReqMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

SetUserProfileReqMsg* SetUserProfileReqMsg::default_instance_ = NULL;

SetUserProfileReqMsg* SetUserProfileReqMsg::New() const {
  return new SetUserProfileReqMsg;
}

void SetUserProfileReqMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_session_token()) {
      if (session_token_ != &::google::protobuf::internal::kEmptyString) {
        session_token_->clear();
      }
    }
    if (has_avada_url()) {
      if (avada_url_ != &::google::protobuf::internal::kEmptyString) {
        avada_url_->clear();
      }
    }
    if (has_usr_name()) {
      if (usr_name_ != &::google::protobuf::internal::kEmptyString) {
        usr_name_->clear();
      }
    }
    if (has_avada_size()) {
      if (avada_size_ != &::google::protobuf::internal::kEmptyString) {
        avada_size_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetUserProfileReqMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_token;
        break;
      }

      // optional string session_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_token().data(), this->session_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_avada_url;
        break;
      }

      // optional string avada_url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avada_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avada_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->avada_url().data(), this->avada_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_usr_name;
        break;
      }

      // optional string usr_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usr_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usr_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usr_name().data(), this->usr_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_avada_size;
        break;
      }

      // optional string avada_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avada_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avada_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->avada_size().data(), this->avada_size().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetUserProfileReqMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional string session_token = 2;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_token(), output);
  }

  // optional string avada_url = 3;
  if (has_avada_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avada_url().data(), this->avada_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->avada_url(), output);
  }

  // optional string usr_name = 4;
  if (has_usr_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usr_name().data(), this->usr_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->usr_name(), output);
  }

  // optional string avada_size = 5;
  if (has_avada_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avada_size().data(), this->avada_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->avada_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetUserProfileReqMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional string session_token = 2;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_token(), target);
  }

  // optional string avada_url = 3;
  if (has_avada_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avada_url().data(), this->avada_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->avada_url(), target);
  }

  // optional string usr_name = 4;
  if (has_usr_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usr_name().data(), this->usr_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->usr_name(), target);
  }

  // optional string avada_size = 5;
  if (has_avada_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avada_size().data(), this->avada_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->avada_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetUserProfileReqMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional string session_token = 2;
    if (has_session_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_token());
    }

    // optional string avada_url = 3;
    if (has_avada_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avada_url());
    }

    // optional string usr_name = 4;
    if (has_usr_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usr_name());
    }

    // optional string avada_size = 5;
    if (has_avada_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avada_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetUserProfileReqMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetUserProfileReqMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetUserProfileReqMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetUserProfileReqMsg::MergeFrom(const SetUserProfileReqMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_session_token()) {
      set_session_token(from.session_token());
    }
    if (from.has_avada_url()) {
      set_avada_url(from.avada_url());
    }
    if (from.has_usr_name()) {
      set_usr_name(from.usr_name());
    }
    if (from.has_avada_size()) {
      set_avada_size(from.avada_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetUserProfileReqMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetUserProfileReqMsg::CopyFrom(const SetUserProfileReqMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUserProfileReqMsg::IsInitialized() const {

  return true;
}

void SetUserProfileReqMsg::Swap(SetUserProfileReqMsg* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(session_token_, other->session_token_);
    std::swap(avada_url_, other->avada_url_);
    std::swap(usr_name_, other->usr_name_);
    std::swap(avada_size_, other->avada_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetUserProfileReqMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetUserProfileReqMsg_descriptor_;
  metadata.reflection = SetUserProfileReqMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetUserProfileRespMsg::kRetCodeFieldNumber;
#endif  // !_MSC_VER

SetUserProfileRespMsg::SetUserProfileRespMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetUserProfileRespMsg::InitAsDefaultInstance() {
}

SetUserProfileRespMsg::SetUserProfileRespMsg(const SetUserProfileRespMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetUserProfileRespMsg::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetUserProfileRespMsg::~SetUserProfileRespMsg() {
  SharedDtor();
}

void SetUserProfileRespMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetUserProfileRespMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetUserProfileRespMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetUserProfileRespMsg_descriptor_;
}

const SetUserProfileRespMsg& SetUserProfileRespMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_account_2eproto();
  return *default_instance_;
}

SetUserProfileRespMsg* SetUserProfileRespMsg::default_instance_ = NULL;

SetUserProfileRespMsg* SetUserProfileRespMsg::New() const {
  return new SetUserProfileRespMsg;
}

void SetUserProfileRespMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetUserProfileRespMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Cell.RetCode ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cell::RetCode_IsValid(value)) {
            set_ret_code(static_cast< ::Cell::RetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetUserProfileRespMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetUserProfileRespMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Cell.RetCode ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetUserProfileRespMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Cell.RetCode ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetUserProfileRespMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetUserProfileRespMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetUserProfileRespMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetUserProfileRespMsg::MergeFrom(const SetUserProfileRespMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetUserProfileRespMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetUserProfileRespMsg::CopyFrom(const SetUserProfileRespMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUserProfileRespMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetUserProfileRespMsg::Swap(SetUserProfileRespMsg* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetUserProfileRespMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetUserProfileRespMsg_descriptor_;
  metadata.reflection = SetUserProfileRespMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cell

// @@protoc_insertion_point(global_scope)
